(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["MIPSAssem"] = factory();
	else
		root["MIPSAssem"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/mips-inst/dist/mipsinst.js":
/*!*************************************************!*\
  !*** ./node_modules/mips-inst/dist/mipsinst.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"./src/bitstrings.js\":\n/*!***************************!*\\\n  !*** ./src/bitstrings.js ***!\n  \\***************************/\n/*! exports provided: isBinaryLiteral, compareBits, makeBitMaskFromString, makeBitMask, padBitString */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"isBinaryLiteral\\\", function() { return isBinaryLiteral; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"compareBits\\\", function() { return compareBits; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"makeBitMaskFromString\\\", function() { return makeBitMaskFromString; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"makeBitMask\\\", function() { return makeBitMask; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"padBitString\\\", function() { return padBitString; });\\nfunction isBinaryLiteral(str) {\\n  return str[0] === \\\"0\\\" || str[0] === \\\"1\\\"; // Checking first char is enough for now\\n}\\n\\nfunction compareBits(number, bitString, bitOffset) {\\n  let shifted = (number >>> bitOffset) & makeBitMask(bitString.length);\\n  let mask = makeBitMaskFromString(bitString);\\n  return shifted === mask;\\n}\\n\\nfunction makeBitMaskFromString(bitString) {\\n  let mask = 0;\\n  for (var i = 0; i < bitString.length; i++) {\\n    let bit = bitString[i] === \\\"1\\\" ? 1 : 0;\\n    mask <<= 1;\\n    mask = mask | bit;\\n  }\\n  return mask;\\n}\\n\\nfunction makeBitMask(len) {\\n  if (len <= 0)\\n    throw new Error(`makeBitMask cannot make mask of length ${len}`);\\n\\n  let mask = 1;\\n  while (--len) {\\n    mask <<= 1;\\n    mask = mask | 1;\\n  }\\n  return mask;\\n}\\n\\nfunction padBitString(str, minLen) {\\n  while (str.length < minLen) {\\n    str = \\\"0\\\" + str;\\n  }\\n  return str;\\n}\\n\\n\\n//# sourceURL=webpack://MIPSInst/./src/bitstrings.js?\");\n\n/***/ }),\n\n/***/ \"./src/immediates.js\":\n/*!***************************!*\\\n  !*** ./src/immediates.js ***!\n  \\***************************/\n/*! exports provided: parseImmediate, formatImmediate, makeInt16, getImmFormatDetails */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"parseImmediate\\\", function() { return parseImmediate; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"formatImmediate\\\", function() { return formatImmediate; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"makeInt16\\\", function() { return makeInt16; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"getImmFormatDetails\\\", function() { return getImmFormatDetails; });\\nfunction parseImmediate(immArr, maxBits, signed, shift) {\\n  let [neg, base, num] = immArr;\\n  base = base.toLowerCase();\\n\\n  let value;\\n  if (base === \\\"b\\\")\\n    value = parseInt(num, 2);\\n  else if (base === \\\"o\\\")\\n    value = parseInt(num, 8);\\n  else if (base === \\\"x\\\")\\n    value = parseInt(num, 16);\\n  else\\n    value = parseInt(num, 10);\\n\\n  if (shift) {\\n    value >>>= shift;\\n  }\\n\\n  if (maxBits === 16) {\\n    if (signed) {\\n      value = makeInt16(value);\\n    }\\n  }\\n\\n  if (neg)\\n    value = -value;\\n\\n  return value;\\n}\\n\\nfunction formatImmediate(value, maxBits) {\\n  if (maxBits === 16) {\\n    value = (new Uint16Array([value]))[0];\\n  }\\n\\n  return value;\\n}\\n\\nfunction makeInt16(value) {\\n  return (new Int16Array([value]))[0];\\n}\\n\\nfunction getImmFormatDetails(formatVal) {\\n  // Remove optional indicator\\n  if (formatVal[formatVal.length - 1] === \\\"?\\\")\\n    formatVal = formatVal.substring(0, formatVal.length - 1);\\n\\n  if (formatVal.indexOf(\\\"int\\\") === -1) {\\n    if (formatVal.substr(0, 2) === \\\"cc\\\") {\\n      return {\\n        signed: false,\\n        bits: 4,\\n        shift: false,\\n      };\\n    }\\n\\n    return null; // Not an immediate\\n  }\\n\\n  let shift = 0;\\n  const shiftIndex = formatVal.indexOf(\\\"shift\\\");\\n  if (shiftIndex > 0)\\n    shift = formatVal.substr(shiftIndex).match(/\\\\d+/g);\\n\\n  return {\\n    signed: formatVal[0] !== \\\"u\\\",\\n    bits: parseInt(formatVal.match(/\\\\d+/g)),\\n    shift: shift,\\n  };\\n}\\n\\n\\n//# sourceURL=webpack://MIPSInst/./src/immediates.js?\");\n\n/***/ }),\n\n/***/ \"./src/index.js\":\n/*!**********************!*\\\n  !*** ./src/index.js ***!\n  \\**********************/\n/*! exports provided: parse, print */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse */ \\\"./src/parse.js\\\");\\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \\\"parse\\\", function() { return _parse__WEBPACK_IMPORTED_MODULE_0__[\\\"parse\\\"]; });\\n\\n/* harmony import */ var _print__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./print */ \\\"./src/print.js\\\");\\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \\\"print\\\", function() { return _print__WEBPACK_IMPORTED_MODULE_1__[\\\"print\\\"]; });\\n\\n\\n\\n\\n\\n\\n//# sourceURL=webpack://MIPSInst/./src/index.js?\");\n\n/***/ }),\n\n/***/ \"./src/opcodes.js\":\n/*!************************!*\\\n  !*** ./src/opcodes.js ***!\n  \\************************/\n/*! exports provided: getOpcodeDetails, getValueBitLength, findMatch */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"getOpcodeDetails\\\", function() { return getOpcodeDetails; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"getValueBitLength\\\", function() { return getValueBitLength; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"findMatch\\\", function() { return findMatch; });\\n/* harmony import */ var _regs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regs */ \\\"./src/regs.js\\\");\\n/* harmony import */ var _bitstrings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bitstrings */ \\\"./src/bitstrings.js\\\");\\n/* harmony import */ var _immediates__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./immediates */ \\\"./src/immediates.js\\\");\\n\\n\\n\\n\\nconst rs = \\\"rs\\\";\\nconst rt = \\\"rt\\\";\\nconst rd = \\\"rd\\\";\\nconst fs = \\\"fs\\\";\\nconst ft = \\\"ft\\\";\\nconst fd = \\\"fd\\\";\\nconst fr = \\\"fr\\\";\\nconst sa = \\\"uint5\\\";\\nconst uint5 = \\\"uint5\\\";\\nconst uint10 = \\\"uint10\\\";\\nconst int16 = \\\"int16\\\";\\nconst uint16 = \\\"uint16\\\";\\nconst uint20 = \\\"uint20\\\";\\nconst uint26 = \\\"uint26\\\";\\nconst uint26shift2 = \\\"uint26shift2\\\";\\nconst cc = \\\"cc\\\";\\nconst cond = \\\"cond\\\";\\nconst fmt = \\\"fmt\\\";\\nconst fmt3 = \\\"fmt3\\\";\\n\\nfunction getOpcodeDetails(opcode) {\\n  return opcodeDetails[opcode.toLowerCase()];\\n}\\n\\nfunction getValueBitLength(str) {\\n  if (Object(_bitstrings__WEBPACK_IMPORTED_MODULE_1__[\\\"isBinaryLiteral\\\"])(str))\\n    return str.length;\\n\\n  str = str.replace(\\\"?\\\", \\\"\\\");\\n  switch (str) {\\n    case \\\"cc\\\":\\n    case \\\"fmt3\\\":\\n      return 3;\\n\\n    case \\\"cond\\\":\\n      return 4;\\n\\n    case \\\"rs\\\":\\n    case \\\"rt\\\":\\n    case \\\"rd\\\":\\n    case \\\"fs\\\":\\n    case \\\"ft\\\":\\n    case \\\"fd\\\":\\n    case \\\"fr\\\":\\n    case \\\"sa\\\":\\n    case \\\"fmt\\\":\\n      return 5;\\n  }\\n\\n  const immDetails = Object(_immediates__WEBPACK_IMPORTED_MODULE_2__[\\\"getImmFormatDetails\\\"])(str);\\n  if (immDetails) {\\n    return immDetails.bits;\\n  }\\n\\n  throw new Error(`Unrecongized format value: ${str}`);\\n}\\n\\n// returns name\\nfunction findMatch(inst) {\\n  let bestMatch = \\\"\\\";\\n  let bestMatchScore = 0;\\n  for (let opName in opcodeDetails) {\\n    const format = opcodeDetails[opName].format;\\n    const fmts = opcodeDetails[opName].fmts;\\n    const score = formatMatches(inst, format, fmts);\\n    if (score > bestMatchScore) {\\n      bestMatch = opName;\\n      bestMatchScore = score;\\n    }\\n  }\\n\\n  return bestMatch;\\n}\\n\\n// Returns number of literal bits matched, if the overall format matches.\\nfunction formatMatches(number, format, fmts) {\\n  let score = 0;\\n  let tempScore;\\n  let bitOffset = 0;\\n  for (let i = format.length - 1; i >= 0; i--) {\\n    let bitLength;\\n    let piece = format[i];\\n    if (Array.isArray(piece)) {\\n      let matchedOne = false;\\n      for (let j = 0; j < piece.length; j++) {\\n        tempScore = checkPiece(piece[j], number, bitOffset, fmts);\\n        if (tempScore >= 0) {\\n          matchedOne = true;\\n          score += tempScore;\\n          bitLength = getValueBitLength(piece[j]);\\n          break; // j\\n        }\\n      }\\n      if (!matchedOne)\\n        return 0;\\n    }\\n    else {\\n      tempScore = checkPiece(piece, number, bitOffset, fmts);\\n      if (tempScore >= 0) {\\n        score += tempScore;\\n        bitLength = getValueBitLength(piece);\\n      }\\n      else {\\n        return 0;\\n      }\\n    }\\n\\n    bitOffset += bitLength;\\n  }\\n\\n  return score;\\n}\\n\\nfunction checkPiece(piece, number, bitOffset, fmts) {\\n  if (!Object(_bitstrings__WEBPACK_IMPORTED_MODULE_1__[\\\"isBinaryLiteral\\\"])(piece)) {\\n    if (piece === fmt) {\\n      for (let i = 0; i < fmts.length; i++) {\\n        let fmtBitString = Object(_bitstrings__WEBPACK_IMPORTED_MODULE_1__[\\\"padBitString\\\"])(Object(_regs__WEBPACK_IMPORTED_MODULE_0__[\\\"getFmtBits\\\"])(fmts[i]).toString(2), 5);\\n        if (Object(_bitstrings__WEBPACK_IMPORTED_MODULE_1__[\\\"compareBits\\\"])(number, fmtBitString, bitOffset))\\n          return fmtBitString.length;\\n      }\\n      return -1;\\n    }\\n\\n    if (piece === fmt3) {\\n      for (let i = 0; i < fmts.length; i++) {\\n        let fmtBitString = Object(_bitstrings__WEBPACK_IMPORTED_MODULE_1__[\\\"padBitString\\\"])(Object(_regs__WEBPACK_IMPORTED_MODULE_0__[\\\"getFmt3Bits\\\"])(fmts[i]).toString(2), 3);\\n        if (Object(_bitstrings__WEBPACK_IMPORTED_MODULE_1__[\\\"compareBits\\\"])(number, fmtBitString, bitOffset))\\n          return fmtBitString.length;\\n      }\\n      return -1;\\n    }\\n\\n    return 0; // non-literal contributes nothing\\n  }\\n\\n  if (Object(_bitstrings__WEBPACK_IMPORTED_MODULE_1__[\\\"compareBits\\\"])(number, piece, bitOffset))\\n    return piece.length;\\n\\n  return -1;\\n}\\n\\nconst opcodeDetails = {\\n  \\\"abs.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, \\\"00000\\\", fs, fd, \\\"000101\\\"],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fs],\\n  },\\n  add: {\\n    format: [\\\"000000\\\", rs, rt, rd, \\\"00000100000\\\"],\\n    display: [rd, rs, rt],\\n  },\\n  \\\"add.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, ft, fs, fd, \\\"000000\\\"],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fs, ft],\\n  },\\n  addi: {\\n    format: [\\\"001000\\\", rs, rt, int16],\\n    display: [rt, rs, int16],\\n  },\\n  addiu: {\\n    format: [\\\"001001\\\", rs, rt, uint16],\\n    display: [rt, rs, uint16],\\n  },\\n  addu: {\\n    format: [\\\"000000\\\", rs, rt, rd, \\\"00000100001\\\"],\\n    display: [rd, rs, rt],\\n  },\\n  and: {\\n    format: [\\\"000000\\\", rs, rt, rd, \\\"00000100100\\\"],\\n    display: [rd, rs, rt],\\n  },\\n  andi: {\\n    format: [\\\"001100\\\", rs, rt, uint16],\\n    display: [rt, rs, uint16],\\n  },\\n  bc1f: {\\n    format: [\\\"010001\\\", \\\"01000\\\", [cc, \\\"000\\\"], \\\"00\\\", int16], // TODO shifting?\\n    display: [\\\"cc?\\\", int16], // offset\\n  },\\n  bc1fl: {\\n    format: [\\\"010001\\\", \\\"01000\\\", [cc, \\\"000\\\"], \\\"10\\\", int16],\\n    display: [\\\"cc?\\\", int16], // offset\\n  },\\n  bc1t: {\\n    format: [\\\"010001\\\", \\\"01000\\\", [cc, \\\"000\\\"], \\\"01\\\", int16],\\n    display: [\\\"cc?\\\", int16], // offset\\n  },\\n  bc1tl: {\\n    format: [\\\"010001\\\", \\\"01000\\\", [cc, \\\"000\\\"], \\\"11\\\", int16],\\n    display: [\\\"cc?\\\", int16], // offset\\n  },\\n  beq: {\\n    format: [\\\"000100\\\", rs, rt, uint16],\\n    display: [rs, rt, uint16], // offset\\n  },\\n  beql: {\\n    format: [\\\"010100\\\", rs, rt, uint16],\\n    display: [rs, rt, uint16], // offset\\n  },\\n  bgez: {\\n    format: [\\\"000001\\\", rs, \\\"00001\\\", uint16],\\n    display: [rs, uint16], // offset\\n  },\\n  bgezal: {\\n    format: [\\\"000001\\\", rs, \\\"10001\\\", uint16],\\n    display: [rs, uint16], // offset\\n  },\\n  bgezall: {\\n    format: [\\\"000001\\\", rs, \\\"10011\\\", uint16],\\n    display: [rs, uint16], // offset\\n  },\\n  bgezl: {\\n    format: [\\\"000001\\\", rs, \\\"00011\\\", uint16],\\n    display: [rs, uint16], // offset\\n  },\\n  bgtz: {\\n    format: [\\\"000111\\\", rs, \\\"00000\\\", uint16],\\n    display: [rs, uint16], // offset\\n  },\\n  bgtzl: {\\n    format: [\\\"010111\\\", rs, \\\"00000\\\", uint16],\\n    display: [rs, uint16], // offset\\n  },\\n  blez: {\\n    format: [\\\"000110\\\", rs, \\\"00000\\\", uint16],\\n    display: [rs, uint16], // offset\\n  },\\n  blezl: {\\n    format: [\\\"010110\\\", rs, \\\"00000\\\", uint16],\\n    display: [rs, uint16], // offset\\n  },\\n  bltz: {\\n    format: [\\\"000001\\\", rs, \\\"00000\\\", uint16],\\n    display: [rs, uint16], // offset\\n  },\\n  bltzal: {\\n    format: [\\\"000001\\\", rs, \\\"10000\\\", uint16],\\n    display: [rs, uint16], // offset\\n  },\\n  bltzall: {\\n    format: [\\\"000001\\\", rs, \\\"10010\\\", uint16],\\n    display: [rs, uint16], // offset\\n  },\\n  bltzl: {\\n    format: [\\\"000001\\\", rs, \\\"00010\\\", uint16],\\n    display: [rs, uint16], // offset\\n  },\\n  bne: {\\n    format: [\\\"000101\\\", rs, rt, uint16],\\n    display: [rs, rt, uint16], // offset\\n  },\\n  bnel: {\\n    format: [\\\"010101\\\", rs, rt, uint16],\\n    display: [rs, rt, uint16], // offset\\n  },\\n  break: {\\n    format: [\\\"000000\\\", [uint20, \\\"00000000000000000000\\\"], \\\"001101\\\"],\\n    display: [],\\n  },\\n  \\\"c.cond.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, ft, fs, [cc, \\\"000\\\"], \\\"00\\\", \\\"11\\\", cond],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [\\\"cc?\\\", fs, ft],\\n  },\\n  \\\"ceil.l.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, \\\"00000\\\", fs, fd, \\\"001010\\\"],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fs],\\n  },\\n  \\\"ceil.w.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, \\\"00000\\\", fs, fd, \\\"001110\\\"],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fs],\\n  },\\n  cfc1: {\\n    format: [\\\"010001\\\", \\\"00010\\\", rt, fs, \\\"00000000000\\\"],\\n    display: [rt, fs],\\n  },\\n  ctc1: {\\n    format: [\\\"010001\\\", \\\"00110\\\", rt, fs, \\\"00000000000\\\"],\\n    display: [rt, fs],\\n  },\\n  cop0: {\\n    format: [\\\"010000\\\", uint26],\\n    display: [uint26], // cop_fun\\n  },\\n  cop1: {\\n    format: [\\\"010001\\\", uint26],\\n    display: [uint26], // cop_fun\\n  },\\n  cop2: {\\n    format: [\\\"010010\\\", uint26],\\n    display: [uint26], // cop_fun\\n  },\\n  cop3: {\\n    format: [\\\"010011\\\", uint26],\\n    display: [uint26], // cop_fun\\n  },\\n  \\\"cvt.d.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, \\\"00000\\\", fs, fd, \\\"100001\\\"],\\n    fmts: [\\\"S\\\", \\\"W\\\", \\\"L\\\"],\\n    display: [fd, fs],\\n  },\\n  \\\"cvt.l.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, \\\"00000\\\", fs, fd, \\\"100101\\\"],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fs],\\n  },\\n  \\\"cvt.s.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, \\\"00000\\\", fs, fd, \\\"100000\\\"],\\n    fmts: [\\\"D\\\", \\\"W\\\", \\\"L\\\"],\\n    display: [fd, fs],\\n  },\\n  \\\"cvt.w.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, \\\"00000\\\", fs, fd, \\\"100100\\\"],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fs],\\n  },\\n  dadd: {\\n    format: [\\\"000000\\\", rs, rt, rd, \\\"00000101100\\\"],\\n    display: [rd, rs, rt],\\n  },\\n  daddi: {\\n    format: [\\\"011000\\\", rs, rt, int16],\\n    display: [rt, rs, int16],\\n  },\\n  daddiu: {\\n    format: [\\\"011001\\\", rs, rt, uint16],\\n    display: [rt, rs, uint16],\\n  },\\n  daddu: {\\n    format: [\\\"000000\\\", rs, rt, rd, \\\"00000101101\\\"],\\n    display: [rd, rs, rt],\\n  },\\n  ddiv: {\\n    format: [\\\"000000\\\", rs, rt, \\\"0000000000011110\\\"],\\n    display: [rs, rt],\\n  },\\n  ddivu: {\\n    format: [\\\"000000\\\", rs, rt, \\\"0000000000011111\\\"],\\n    display: [rs, rt],\\n  },\\n  div: {\\n    format: [\\\"000000\\\", rs, rt, \\\"0000000000011010\\\"],\\n    display: [rs, rt],\\n  },\\n  \\\"div.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, ft, fs, fd, \\\"000011\\\"],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fs, ft],\\n  },\\n  divu: {\\n    format: [\\\"000000\\\", rs, rt, \\\"0000000000011011\\\"],\\n    display: [rs, rt],\\n  },\\n  dmfc1: {\\n    format: [\\\"010001\\\", \\\"00001\\\", rt, fs, \\\"00000000000\\\"],\\n    display: [rt, fs],\\n  },\\n  dmult: {\\n    format: [\\\"000000\\\", rs, rt, \\\"0000000000011100\\\"],\\n    display: [rs, rt],\\n  },\\n  dmultu: {\\n    format: [\\\"000000\\\", rs, rt, \\\"0000000000011101\\\"],\\n    display: [rs, rt],\\n  },\\n  dmtc1: {\\n    format: [\\\"010001\\\", \\\"00101\\\", rt, fs, \\\"00000000000\\\"],\\n    display: [rt, fs],\\n  },\\n  dsll: {\\n    format: [\\\"00000000000\\\", rt, rd, sa, \\\"111000\\\"],\\n    display: [rd, rt, sa],\\n  },\\n  dsll32: {\\n    format: [\\\"00000000000\\\", rt, rd, sa, \\\"111100\\\"],\\n    display: [rd, rt, sa],\\n  },\\n  dsllv: {\\n    format: [\\\"000000\\\", rs, rt, rd, \\\"00000010100\\\"],\\n    display: [rd, rt, rs],\\n  },\\n  dsra: {\\n    format: [\\\"00000000000\\\", rt, rd, sa, \\\"111011\\\"],\\n    display: [rd, rt, sa],\\n  },\\n  dsra32: {\\n    format: [\\\"00000000000\\\", rt, rd, sa, \\\"111111\\\"],\\n    display: [rd, rt, sa],\\n  },\\n  dsrav: {\\n    format: [\\\"000000\\\", rs, rt, rd, \\\"00000010111\\\"],\\n    display: [rd, rt, rs],\\n  },\\n  dsrl: {\\n    format: [\\\"00000000000\\\", rt, rd, sa, \\\"111010\\\"],\\n    display: [rd, rt, sa],\\n  },\\n  dsrl32: {\\n    format: [\\\"00000000000\\\", rt, rd, sa, \\\"111110\\\"],\\n    display: [rd, rt, sa],\\n  },\\n  dsrlv: {\\n    format: [\\\"000000\\\", rs, rt, rd, \\\"00000010110\\\"],\\n    display: [rd, rt, rs],\\n  },\\n  dsub: {\\n    format: [\\\"000000\\\", rs, rt, rd, \\\"00000101110\\\"],\\n    display: [rd, rs, rt],\\n  },\\n  dsubu: {\\n    format: [\\\"000000\\\", rs, rt, rd, \\\"00000101111\\\"],\\n    display: [rd, rs, rt],\\n  },\\n  \\\"floor.l.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, \\\"00000\\\", fs, fd, \\\"001011\\\"],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fs],\\n  },\\n  \\\"floor.w.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, \\\"00000\\\", fs, fd, \\\"001111\\\"],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fs],\\n  },\\n  j: {\\n    format: [\\\"000010\\\", uint26shift2],\\n    display: [uint26shift2],\\n  },\\n  jal: {\\n    format: [\\\"000011\\\", uint26shift2],\\n    display: [uint26shift2],\\n  },\\n  jalr: {\\n    format: [\\\"000000\\\", rs, \\\"00000\\\", [rd, \\\"11111\\\"], \\\"00000\\\", \\\"001001\\\"],\\n    display: [\\\"rd?\\\", rs],\\n  },\\n  jr: {\\n    format: [\\\"000000\\\", rs, \\\"000000000000000\\\", \\\"001000\\\"],\\n    display: [rs],\\n  },\\n  lb: {\\n    format: [\\\"100000\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  lbu: {\\n    format: [\\\"100100\\\", rs, rt, uint16],\\n    display: [rt, uint16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  ld: {\\n    format: [\\\"110111\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  ldc1: {\\n    format: [\\\"110101\\\", rs, ft, int16],\\n    display: [ft, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  ldc2: {\\n    format: [\\\"110110\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  ldl: {\\n    format: [\\\"011010\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  ldr: {\\n    format: [\\\"011011\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  ldxc1: {\\n    format: [\\\"010011\\\", rs, rt, \\\"00000\\\", fd, \\\"000001\\\"],\\n    display: [fd, rt, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  lh: {\\n    format: [\\\"100001\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  lhu: {\\n    format: [\\\"100101\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  ll: {\\n    format: [\\\"110000\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  lld: {\\n    format: [\\\"110100\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  lui: {\\n    format: [\\\"001111\\\", \\\"00000\\\", rt, uint16],\\n    display: [rt, uint16],\\n  },\\n  lw: {\\n    format: [\\\"100011\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  lwc1: {\\n    format: [\\\"110001\\\", rs, ft, int16],\\n    display: [ft, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  lwc2: {\\n    format: [\\\"110010\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  lwc3: {\\n    format: [\\\"110011\\\" ,rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  lwl: {\\n    format: [\\\"100010\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  lwr: {\\n    format: [\\\"100110\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  lwu: {\\n    format: [\\\"100111\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  lwxc1: {\\n    format: [\\\"010011\\\", rs, rt, \\\"00000\\\", fd, \\\"000000\\\"],\\n    display: [fd, rt, \\\"(\\\", rs, \\\")\\\"],\\n  },\\n  \\\"madd.fmt\\\": {\\n    format: [\\\"010011\\\", fr, ft, fs, fd, \\\"100\\\", fmt3],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fr, fs, ft],\\n  },\\n  mfc1: {\\n    format: [\\\"010001\\\", \\\"00000\\\", rt, fs, \\\"00000000000\\\"],\\n    display: [rt, fs],\\n  },\\n  mfhi: {\\n    format: [\\\"000000\\\", \\\"0000000000\\\", rd, \\\"00000\\\", \\\"010000\\\"],\\n    display: [rd],\\n  },\\n  mflo: {\\n    format: [\\\"000000\\\", \\\"0000000000\\\", rd, \\\"00000\\\", \\\"010010\\\"],\\n    display: [rd],\\n  },\\n  \\\"mov.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, \\\"00000\\\", fs, fd, \\\"000110\\\"],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fs],\\n  },\\n  movf: {\\n    format: [\\\"000000\\\", rs, cc, \\\"00\\\", rd, \\\"00000\\\", \\\"000001\\\"],\\n    display: [rd, rs, cc],\\n  },\\n  \\\"movf.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, cc, \\\"00\\\", fs, fd, \\\"010001\\\"],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fs, cc],\\n  },\\n  movn: {\\n    format: [\\\"000000\\\", rs, rt, rd, \\\"00000\\\", \\\"001011\\\"],\\n    display: [rd, rs, rt],\\n  },\\n  \\\"movn.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, rt, fs, fd, \\\"010011\\\"],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fs, rt],\\n  },\\n  movt: {\\n    format: [\\\"000000\\\", rs, cc, \\\"01\\\", rd, \\\"00000\\\", \\\"000001\\\"],\\n    display: [rd, rs, cc],\\n  },\\n  \\\"movt.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, cc, \\\"01\\\", fs, fd, \\\"010001\\\"],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fs, cc],\\n  },\\n  movz: {\\n    format: [\\\"000000\\\", rs, rt, rd, \\\"00000\\\", \\\"001010\\\"],\\n    display: [rd, rs, rt],\\n  },\\n  \\\"movz.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, rt, fs, fd, \\\"010010\\\"],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fs, rt],\\n  },\\n  \\\"msub.fmt\\\": {\\n    format: [\\\"010011\\\", fr, ft, fs, fd, \\\"101\\\", fmt3],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fr, fs, ft],\\n  },\\n  mtc1: {\\n    format: [\\\"010001\\\", \\\"00100\\\", rt, fs, \\\"00000000000\\\"],\\n    display: [rt, fs],\\n  },\\n  mthi: {\\n    format: [\\\"000000\\\", rs, \\\"000000000000000\\\", \\\"010001\\\"],\\n    display: [rs],\\n  },\\n  mtlo: {\\n    format: [\\\"000000\\\", rs, \\\"000000000000000\\\", \\\"010011\\\"],\\n    display: [rs],\\n  },\\n  \\\"mul.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, ft, fs, fd, \\\"000010\\\"],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fs, ft],\\n  },\\n  mult: {\\n    format: [\\\"000000\\\", rs, rt, \\\"0000000000\\\", \\\"011000\\\"],\\n    display: [rs, rt],\\n  },\\n  multu: {\\n    format: [\\\"000000\\\", rs, rt, \\\"0000000000\\\", \\\"011001\\\"],\\n    display: [rs, rt],\\n  },\\n  \\\"neg.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, \\\"00000\\\", fs, fd, \\\"000111\\\"],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fs],\\n  },\\n  \\\"nmadd.fmt\\\": {\\n    format: [\\\"010011\\\", fr, ft, fs, fd, \\\"110\\\", fmt3],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fr, fs, ft],\\n  },\\n  \\\"nmsub.fmt\\\": {\\n    format: [\\\"010011\\\", fr, ft, fs, fd, \\\"111\\\", fmt3],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fr, fs, ft],\\n  },\\n  nop: {\\n    format: [\\\"00000000000000000000000000000000\\\"],\\n    display: [],\\n  },\\n  nor: {\\n    format: [\\\"000000\\\", rs, rt, rd, \\\"00000\\\", \\\"100111\\\"],\\n    display: [rd, rs, rt],\\n  },\\n  or: {\\n    format: [\\\"000000\\\", rs, rt, rd, \\\"00000\\\", \\\"100101\\\"],\\n    display: [rd, rs, rt],\\n  },\\n  ori: {\\n    format: [\\\"001101\\\", rs, rt, uint16],\\n    display: [rt, rs, uint16],\\n  },\\n  pref: {\\n    format: [\\\"110011\\\", rs, uint5, int16],\\n    display: [uint5, int16, \\\"(\\\", rs, \\\")\\\"], // hint, offset, base\\n  },\\n  prefx: {\\n    format: [\\\"010011\\\", rs, rt, uint5, \\\"00000\\\", \\\"001111\\\"],\\n    display: [uint5, rt, \\\"(\\\", rs, \\\")\\\"], // hint, index, base\\n  },\\n  \\\"recip.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, \\\"00000\\\", fs, fd, \\\"010101\\\"],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fs],\\n  },\\n  \\\"round.l.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, \\\"00000\\\", fs, fd, \\\"001000\\\"],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fs],\\n  },\\n  \\\"round.w.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, \\\"00000\\\", fs, fd, \\\"001100\\\"],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fs],\\n  },\\n  \\\"rsqrt.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, \\\"00000\\\", fs, fd, \\\"010110\\\"],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fs],\\n  },\\n  sb: {\\n    format: [\\\"101000\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  sc: {\\n    format: [\\\"111000\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  scd: {\\n    format: [\\\"111100\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  sd: {\\n    format: [\\\"111111\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  sdc1: {\\n    format: [\\\"111101\\\", rs, ft, int16],\\n    display: [ft, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  sdc2: {\\n    format: [\\\"111110\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  sdl: {\\n    format: [\\\"101100\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  sdr: {\\n    format: [\\\"101101\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  sdxc1: {\\n    format: [\\\"010011\\\", rs, uint5, fs, \\\"00000\\\", \\\"001001\\\"],\\n    display: [fs, uint5, \\\"(\\\", rs, \\\")\\\"],\\n  },\\n  sh: {\\n    format: [\\\"101001\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"], // offset\\n  },\\n  sll: {\\n    format: [\\\"000000\\\", \\\"00000\\\", rt, rd, sa, \\\"000000\\\"],\\n    display: [rd, rt, sa],\\n  },\\n  sllv: {\\n    format: [\\\"000000\\\", rs, rt, rd, \\\"00000\\\", \\\"000100\\\"],\\n    display: [rd, rt, rs],\\n  },\\n  slt: {\\n    format: [\\\"000000\\\", rs, rt, rd, \\\"00000\\\", \\\"101010\\\"],\\n    display: [rd, rs, rt],\\n  },\\n  slti: {\\n    format: [\\\"001010\\\", rs, rt, int16],\\n    display: [rt, rs, int16],\\n  },\\n  sltiu: {\\n    format: [\\\"001011\\\", rs, rt, uint16],\\n    display: [rt, rs, uint16],\\n  },\\n  sltu: {\\n    format: [\\\"000000\\\", rs, rt, rd, \\\"00000\\\", \\\"101011\\\"],\\n    display: [rd, rs, rt],\\n  },\\n  \\\"sqrt.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, \\\"00000\\\", fs, fd, \\\"000100\\\"],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fs],\\n  },\\n  sra: {\\n    format: [\\\"000000\\\", \\\"00000\\\", rt, rd, sa, \\\"000011\\\"],\\n    display: [rd, rt, sa],\\n  },\\n  srav: {\\n    format: [\\\"000000\\\", rs, rt, rd, \\\"00000\\\", \\\"000111\\\"],\\n    display: [rd, rt, rs],\\n  },\\n  srl: {\\n    format: [\\\"000000\\\", \\\"00000\\\", rt, rd, sa, \\\"000010\\\"],\\n    display: [rd, rt, sa],\\n  },\\n  srlv: {\\n    format: [\\\"000000\\\", rs, rt, rd, \\\"00000\\\", \\\"000110\\\"],\\n    display: [rd, rt, rs],\\n  },\\n  sub: {\\n    format: [\\\"000000\\\", rs, rt, rd, \\\"00000\\\", \\\"100010\\\"],\\n    display: [rd, rs, rt],\\n  },\\n  \\\"sub.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, ft, fs, fd, \\\"000001\\\"],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fs, ft],\\n  },\\n  subu: {\\n    format: [\\\"000000\\\", rs, rt, rd, \\\"00000\\\", \\\"100011\\\"],\\n    display: [rd, rs, rt],\\n  },\\n  sw: {\\n    format: [\\\"101011\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"],\\n  },\\n  swc1: {\\n    format: [\\\"111001\\\", rs, ft, int16],\\n    display: [ft, int16, \\\"(\\\", rs, \\\")\\\"],\\n  },\\n  swc2: {\\n    format: [\\\"111010\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"],\\n  },\\n  swc3: {\\n    format: [\\\"111011\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"],\\n  },\\n  swl: {\\n    format: [\\\"101010\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"],\\n  },\\n  swr: {\\n    format: [\\\"101110\\\", rs, rt, int16],\\n    display: [rt, int16, \\\"(\\\", rs, \\\")\\\"],\\n  },\\n  swxc1: {\\n    format: [\\\"010011\\\", rs, uint5, fs, \\\"00000\\\", \\\"001000\\\"],\\n    display: [fs, uint5, \\\"(\\\", rs, \\\")\\\"],\\n  },\\n  sync: {\\n    format: [\\\"000000\\\", \\\"000000000000000\\\", \\\"00000\\\", \\\"001111\\\"],\\n    display: [],\\n  },\\n  syscall: {\\n    format: [\\\"000000\\\", [uint20, \\\"00000000000000000000\\\"], \\\"001100\\\"],\\n    display: [],\\n  },\\n  teq: {\\n    format: [\\\"000000\\\", rs, rt, uint10, \\\"110100\\\"],\\n    display: [rs, rt],\\n  },\\n  teqi: {\\n    format: [\\\"000001\\\", rs, \\\"01100\\\", int16],\\n    display: [rs, int16],\\n  },\\n  tge: {\\n    format: [\\\"000000\\\", rs, rt, uint10, \\\"110000\\\"],\\n    display: [rs, rt],\\n  },\\n  tgei: {\\n    format: [\\\"000001\\\", rs, \\\"01000\\\", int16],\\n    display: [rs, int16],\\n  },\\n  tgeiu: {\\n    format: [\\\"000001\\\", rs, \\\"01001\\\", uint16],\\n    display: [rs, uint16],\\n  },\\n  tgeu: {\\n    format: [\\\"000000\\\", rs, rt, uint10, \\\"110001\\\"],\\n    display: [rs, rt],\\n  },\\n  tlt: {\\n    format: [\\\"000000\\\", rs, rt, uint10, \\\"110010\\\"],\\n    display: [rs, rt],\\n  },\\n  tlti: {\\n    format: [\\\"000001\\\", rs, \\\"01010\\\", int16],\\n    display: [rs, int16],\\n  },\\n  tltiu: {\\n    format: [\\\"000001\\\", rs, \\\"01011\\\", uint16],\\n    display: [rs, uint16],\\n  },\\n  tltu: {\\n    format: [\\\"000000\\\", rs, rt, uint10, \\\"110011\\\"],\\n    display: [rs, rt],\\n  },\\n  tne: {\\n    format: [\\\"000000\\\", rs, rt, uint10, \\\"110110\\\"],\\n    display: [rs, rt],\\n  },\\n  tnei: {\\n    format: [\\\"000001\\\", rs, \\\"01110\\\", int16],\\n    display: [rs, int16],\\n  },\\n  \\\"trunc.l.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, \\\"00000\\\", fs, fd, \\\"001001\\\"],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fs],\\n  },\\n  \\\"trunc.w.fmt\\\": {\\n    format: [\\\"010001\\\", fmt, \\\"00000\\\", fs, fd, \\\"001101\\\"],\\n    fmts: [\\\"S\\\", \\\"D\\\"],\\n    display: [fd, fs],\\n  },\\n  xor: {\\n    format: [\\\"000000\\\", rs, rt, rd, \\\"00000\\\", \\\"100110\\\"],\\n    display: [rd, rs, rt],\\n  },\\n  xori: {\\n    format: [\\\"001110\\\", rs, rt, uint16],\\n    display: [rt, rs, uint16],\\n  },\\n};\\n\\n\\n//# sourceURL=webpack://MIPSInst/./src/opcodes.js?\");\n\n/***/ }),\n\n/***/ \"./src/parse.js\":\n/*!**********************!*\\\n  !*** ./src/parse.js ***!\n  \\**********************/\n/*! exports provided: parse */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"parse\\\", function() { return parse; });\\n/* harmony import */ var _opcodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./opcodes */ \\\"./src/opcodes.js\\\");\\n/* harmony import */ var _immediates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./immediates */ \\\"./src/immediates.js\\\");\\n/* harmony import */ var _regs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./regs */ \\\"./src/regs.js\\\");\\n/* harmony import */ var _regex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./regex */ \\\"./src/regex.js\\\");\\n/* harmony import */ var _bitstrings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bitstrings */ \\\"./src/bitstrings.js\\\");\\n\\n\\n\\n\\n\\n\\n/**\\n * Parses a string MIPS instruction, returning numeric machine code.\\n *\\n * With the `intermediate` option, this can also be used as a convenient base\\n * for an assembler. The object output with `intermediate` can be manipulated\\n * prior to calling `parse` with it again.\\n * @param {String|Array|Object} value MIPS instruction, or intermediate object format.\\n * @param {Object} opts Behavior options\\n * @param {Boolean} opts.intermediate: Output an object intermediate format instead of a number\\n * @returns {Number|Array|Object} Returns a numeric representation of the given\\n * MIPS instruction string.\\n * If multiple values are given (array) then multiple values are returned.\\n * When the `intermediate` option is passed, the return type is an object.\\n */\\nfunction parse(value, opts) {\\n  opts = _getFinalOpts(opts);\\n\\n  if (Array.isArray(value)) {\\n    return value.map(s => _parse(s, opts));\\n  }\\n  if (typeof value === \\\"object\\\") {\\n    return _parse(value, opts);\\n  }\\n  if (typeof value === \\\"string\\\") {\\n    const values = value.split(/\\\\r?\\\\n/).filter(v => !!(v.trim()));\\n    if (values.length === 1)\\n      return _parse(values[0], opts);\\n    else\\n      return values.map(s => _parse(s, opts));\\n  }\\n\\n  throw new Error(\\\"Unexpected input to parse. Pass a string or array of strings.\\\");\\n}\\n\\nfunction _getFinalOpts(givenOpts) {\\n  return Object.assign({\\n    intermediate: false,\\n  }, givenOpts);\\n}\\n\\nfunction _parse(value, opts) {\\n  let opcode, opcodeObj, values;\\n  if (typeof value === \\\"string\\\") {\\n    opcode = _regex__WEBPACK_IMPORTED_MODULE_3__[\\\"getOpcode\\\"](value);\\n    if (!opcode)\\n      throw new Error(`Could not parse opcode from ${value}`);\\n\\n    opcodeObj = Object(_opcodes__WEBPACK_IMPORTED_MODULE_0__[\\\"getOpcodeDetails\\\"])(opcode);\\n    if (!opcodeObj)\\n      throw new Error(`Opcode ${opcode} was not recognized`);\\n\\n    values = _parseValues(opcode, opcodeObj, value);\\n  }\\n  else if (typeof value === \\\"object\\\") {\\n    opcode = _regex__WEBPACK_IMPORTED_MODULE_3__[\\\"getOpcode\\\"](value.op);\\n    if (!opcode)\\n      throw new Error(\\\"Object input to parse did not contain 'op'\\\");\\n\\n    opcodeObj = Object(_opcodes__WEBPACK_IMPORTED_MODULE_0__[\\\"getOpcodeDetails\\\"])(opcode);\\n    if (!opcodeObj)\\n      throw new Error(`Opcode ${opcode} was not recognized`);\\n\\n    values = value;\\n  }\\n\\n  if (opts.intermediate)\\n    return values;\\n\\n  return bitsFromFormat(opcodeObj.format, values);\\n}\\n\\nfunction _parseValues(opcode, opcodeObj, value) {\\n  let regex = _regex__WEBPACK_IMPORTED_MODULE_3__[\\\"makeRegexForOpcode\\\"](opcodeObj);\\n  let match = regex.exec(value);\\n  if (!match)\\n    throw `Could not parse instruction: ${value}`;\\n\\n  let values = {\\n    op: opcode\\n  };\\n\\n  if (opcode.indexOf(\\\".fmt\\\") !== -1 || opcode.indexOf(\\\".cond\\\") !== -1) {\\n    determineOpcodeValues(match[1], opcode, opcodeObj.fmts, opcodeObj.format, values);\\n  }\\n\\n  const display = opcodeObj.display;\\n  let matchIndex = 2; // 0 is whole match, 1 is opcode - skip both\\n  for (let i = 0; i < display.length; i++, matchIndex++) {\\n    const parsedVal = match[matchIndex];\\n    let displayEntry = display[i];\\n\\n    const optional = displayEntry.endsWith(\\\"?\\\");\\n    displayEntry = displayEntry.replace(\\\"?\\\", \\\"\\\");\\n\\n    switch (displayEntry) {\\n      case \\\"(\\\":\\n      case \\\")\\\":\\n        matchIndex--; // Eh\\n        continue;\\n\\n      case \\\"rs\\\":\\n      case \\\"rd\\\":\\n      case \\\"rt\\\": {\\n        const tryReg = Object(_regs__WEBPACK_IMPORTED_MODULE_2__[\\\"getRegBits\\\"])(parsedVal);\\n        if (tryReg === undefined) {\\n          if (optional)\\n            continue;\\n\\n          throw new Error(`Unrecognized ${displayEntry} register ${parsedVal}`);\\n        }\\n        values[displayEntry] = tryReg;\\n        continue;\\n      }\\n\\n      case \\\"fs\\\":\\n      case \\\"ft\\\":\\n      case \\\"fd\\\":\\n      case \\\"fr\\\":\\n        values[displayEntry] = parseInt(parsedVal);\\n        if (isNaN(values[displayEntry]))\\n          throw new Error(`Unrecognized ${displayEntry} register ${parsedVal}`);\\n        continue;\\n    }\\n\\n    const immDetails = Object(_immediates__WEBPACK_IMPORTED_MODULE_1__[\\\"getImmFormatDetails\\\"])(displayEntry);\\n    if (immDetails) {\\n      let value;\\n      const immPieces = [match[matchIndex], match[matchIndex + 1], match[matchIndex + 2]];\\n\\n      if (!optional || immPieces[2]) {\\n        value = Object(_immediates__WEBPACK_IMPORTED_MODULE_1__[\\\"parseImmediate\\\"])(immPieces, immDetails.bits, immDetails.signed, immDetails.shift);\\n        values[displayEntry] = value;\\n      }\\n\\n      matchIndex += 2;\\n\\n      continue;\\n    }\\n\\n    throw `Unrecognized opcode display entry ${displayEntry}`;\\n  }\\n\\n  return values;\\n}\\n\\nfunction bitsFromFormat(format, values) {\\n  let output = 0;\\n  let bitOffset = 0;\\n  for (let i = 0; i < format.length; i++) {\\n    let writeResult;\\n    let piece = format[i];\\n    let bitLength = Object(_opcodes__WEBPACK_IMPORTED_MODULE_0__[\\\"getValueBitLength\\\"])(Array.isArray(piece) ? piece[0] : piece);\\n    output = (output << bitLength) >>> 0;\\n    if (Array.isArray(piece)) {\\n      for (let j = 0; j < piece.length; j++) {\\n        writeResult = writeBitsForPiece(piece[j], output, values);\\n        if (writeResult.wrote) {\\n          output = writeResult.output;\\n          break; // j\\n        }\\n      }\\n    }\\n    else {\\n      writeResult = writeBitsForPiece(piece, output, values);\\n      if (writeResult.wrote) {\\n        output = writeResult.output;\\n      }\\n    }\\n\\n    bitOffset += bitLength;\\n  }\\n\\n  if (bitOffset != 32)\\n    throw new Error(\\\"Incorrect number of bits written for format \\\" + format);\\n\\n  return output;\\n}\\n\\nfunction writeBitsForPiece(piece, output, values) {\\n  let wrote = false;\\n  if (Object(_bitstrings__WEBPACK_IMPORTED_MODULE_4__[\\\"isBinaryLiteral\\\"])(piece)) {\\n    output |= Object(_bitstrings__WEBPACK_IMPORTED_MODULE_4__[\\\"makeBitMaskFromString\\\"])(piece);\\n    wrote = true;\\n  }\\n  else if (values[piece] !== undefined) {\\n    let value = values[piece] & Object(_bitstrings__WEBPACK_IMPORTED_MODULE_4__[\\\"makeBitMask\\\"])(Object(_opcodes__WEBPACK_IMPORTED_MODULE_0__[\\\"getValueBitLength\\\"])(piece));\\n    wrote = true;\\n    output |= value;\\n  }\\n\\n  return {\\n    wrote: wrote,\\n    output: output >>> 0,\\n  };\\n}\\n\\nfunction determineOpcodeValues(givenOpcode, genericOpcode, allowedFormats, format, values) {\\n  const givenPieces = givenOpcode.split(\\\".\\\");\\n  const genericPieces = genericOpcode.split(\\\".\\\");\\n  if (givenPieces.length !== genericPieces.length)\\n    throw `Given opcode ${givenOpcode} does not have all pieces (${genericOpcode})`;\\n\\n  for (let i = 0; i < genericPieces.length; i++) {\\n    const genericPiece = genericPieces[i];\\n\\n    if (genericPiece === \\\"fmt\\\" || genericPiece === \\\"ftm3\\\") {\\n      if (allowedFormats.indexOf(givenPieces[i].toUpperCase()) === -1)\\n        throw new Error(`Format ${givenPieces[i]} is not allowed for ${genericPiece}. Allowed values are ${allowedFormats}`);\\n\\n      if (genericPiece === \\\"fmt\\\")\\n        values[\\\"fmt\\\"] = Object(_regs__WEBPACK_IMPORTED_MODULE_2__[\\\"getFmtBits\\\"])(givenPieces[i]);\\n      else if (genericPiece === \\\"fmt3\\\")\\n        values[\\\"fmt3\\\"] = Object(_regs__WEBPACK_IMPORTED_MODULE_2__[\\\"getFmt3Bits\\\"])(givenPieces[i]);\\n    }\\n\\n    if (genericPiece === \\\"cond\\\")\\n      values[\\\"cond\\\"] = Object(_regs__WEBPACK_IMPORTED_MODULE_2__[\\\"getCondBits\\\"])(givenPieces[i]);\\n  }\\n}\\n\\n\\n//# sourceURL=webpack://MIPSInst/./src/parse.js?\");\n\n/***/ }),\n\n/***/ \"./src/print.js\":\n/*!**********************!*\\\n  !*** ./src/print.js ***!\n  \\**********************/\n/*! exports provided: print */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"print\\\", function() { return print; });\\n/* harmony import */ var _opcodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./opcodes */ \\\"./src/opcodes.js\\\");\\n/* harmony import */ var _regs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./regs */ \\\"./src/regs.js\\\");\\n/* harmony import */ var _immediates__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./immediates */ \\\"./src/immediates.js\\\");\\n/* harmony import */ var _bitstrings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bitstrings */ \\\"./src/bitstrings.js\\\");\\n\\n\\n\\n\\n\\n/**\\n * Prints a string representation of a MIPS instruction.\\n *\\n * With the `intermediate` option, this can also be used as a convenient base\\n * for a disassembler. The object output with `intermediate` can be manipulated\\n * prior to calling `print` with it again.\\n * @param {Number|Array|ArrayBuffer|DataView|Object} inst MIPS instruction, or intermediate object format.\\n * @param {Object} opts Behavior options\\n * @param {String} opts.casing \\\"toUpperCase\\\" (default), \\\"toLowerCase\\\"\\n * @param {Boolean} opts.commas True to separate values by commas\\n * @param {Boolean} opts.include$ True to prefix registers with dollar sign\\n * @param {Boolean} opts.intermediate: Output an object intermediate format instead of a string\\n * @param {Number} opts.numBase Number format. 16 (hex, default), 10 (decimal)\\n * @returns {String|Array|Object} Returns a string representation of the given\\n * MIPS instruction code(s).\\n * If multiple values are given (array) then multiple values are returned.\\n * When the `intermediate` option is passed, the return type is an object.\\n */\\nfunction print(inst, opts) {\\n  opts = _getFinalOpts(opts);\\n\\n  if (Array.isArray(inst))\\n    return inst.map(i => _print(i, opts));\\n\\n  const isArrayBuffer = inst instanceof ArrayBuffer;\\n  if (isArrayBuffer || inst instanceof DataView) {\\n    const dataView = isArrayBuffer ? new DataView(inst) : inst;\\n    const result = [];\\n    for (let i = 0; i < dataView.byteLength; i += 4) {\\n      result.push(_print(dataView.getUint32(i), opts));\\n    }\\n    return result;\\n  }\\n\\n  const inputType = typeof inst;\\n  if (inputType === \\\"number\\\" || inputType === \\\"object\\\")\\n    return _print(inst, opts);\\n\\n  throw new Error(\\\"Unexpected input to print.\\\");\\n}\\n\\nfunction _getFinalOpts(givenOpts) {\\n  return Object.assign({\\n    casing: \\\"toUpperCase\\\",\\n    commas: false,\\n    include$: false,\\n    intermediate: false,\\n    numBase: 16\\n  }, givenOpts);\\n}\\n\\nfunction _print(inst, opts) {\\n  let opcodeObj, opName, values;\\n  if (typeof inst === \\\"number\\\") {\\n    opName = Object(_opcodes__WEBPACK_IMPORTED_MODULE_0__[\\\"findMatch\\\"])(inst);\\n    if (!opName)\\n      throw new Error(\\\"Unrecognized instruction\\\");\\n\\n    opcodeObj = Object(_opcodes__WEBPACK_IMPORTED_MODULE_0__[\\\"getOpcodeDetails\\\"])(opName);\\n\\n    values = _extractValues(inst, opcodeObj.format);\\n    values.op = opName;\\n  }\\n  else if (typeof inst === \\\"object\\\") {\\n    if (!inst.op)\\n      throw new Error(\\\"Instruction object did not contain op\\\");\\n\\n    opcodeObj = Object(_opcodes__WEBPACK_IMPORTED_MODULE_0__[\\\"getOpcodeDetails\\\"])(inst.op);\\n\\n    values = inst;\\n  }\\n  else\\n    throw new Error(`Unexpected value ${inst}`);\\n\\n  if (!opcodeObj)\\n    throw new Error(\\\"Invalid opcode\\\");\\n\\n  if (opts.intermediate)\\n    return values;\\n\\n  return _printValues(values, opcodeObj, opts);\\n}\\n\\nfunction _printValues(values, opcodeObj, opts) {\\n  let result = _formatOpcode(values, opts);\\n\\n  function _getRegName(displayEntry) {\\n    switch (displayEntry) {\\n      case \\\"rs\\\":\\n      case \\\"rt\\\":\\n      case \\\"rd\\\":\\n        return Object(_regs__WEBPACK_IMPORTED_MODULE_1__[\\\"getRegName\\\"])(values[displayEntry]);\\n\\n      case \\\"fs\\\":\\n      case \\\"ft\\\":\\n      case \\\"fd\\\":\\n        return Object(_regs__WEBPACK_IMPORTED_MODULE_1__[\\\"getFloatRegName\\\"])(values[displayEntry]);\\n    }\\n  }\\n\\n  const display = opcodeObj.display;\\n  for (let i = 0; i < display.length; i++) {\\n    let displayEntry = display[i];\\n\\n    if (displayEntry.endsWith(\\\"?\\\")) {\\n      displayEntry = displayEntry.replace(\\\"?\\\", \\\"\\\");\\n      if (values[displayEntry] === undefined)\\n        continue; // Optional value, not set.\\n    }\\n\\n    let value = values[displayEntry];\\n    if (value === undefined && displayEntry !== \\\"(\\\" && displayEntry !== \\\")\\\") {\\n      throw new Error(`Expected ${displayEntry} value, got undefined`);\\n    }\\n\\n    let addComma = opts.commas;\\n\\n    switch (displayEntry) {\\n      case \\\"rs\\\":\\n      case \\\"rt\\\":\\n      case \\\"rd\\\":\\n      case \\\"fs\\\":\\n      case \\\"ft\\\":\\n      case \\\"fd\\\":\\n        if (!result.endsWith(\\\"(\\\"))\\n          result += \\\" \\\";\\n        result += _formatReg(_getRegName(displayEntry), opts);\\n        break;\\n\\n      case \\\"(\\\":\\n      case \\\")\\\":\\n        addComma = false;\\n        if (result.endsWith(\\\",\\\"))\\n          result = result.slice(0, -1); // Lop off comma, since we are involved in a parenthesis open/close\\n\\n        result += displayEntry;\\n        break;\\n    }\\n\\n    const immDetails = Object(_immediates__WEBPACK_IMPORTED_MODULE_2__[\\\"getImmFormatDetails\\\"])(displayEntry);\\n    if (immDetails) {\\n      if (!result.endsWith(\\\"(\\\"))\\n        result += \\\" \\\";\\n\\n      if (immDetails.signed && immDetails.bits === 16) {\\n        value = Object(_immediates__WEBPACK_IMPORTED_MODULE_2__[\\\"makeInt16\\\"])(value);\\n      }\\n      if (immDetails.shift) {\\n        value = value << immDetails.shift;\\n      }\\n\\n      result += _formatNumber(value, opts);\\n    }\\n\\n    if (addComma && (i !== display.length - 1) && !result.endsWith(\\\",\\\")) {\\n      result += \\\",\\\";\\n    }\\n  }\\n\\n  return result.trim();\\n}\\n\\nfunction _extractValues(inst, format) {\\n  let values = {};\\n  for (let i = format.length - 1; i >= 0; i--) {\\n    let value, bitLength;\\n    let piece = format[i];\\n    if (Array.isArray(piece)) {\\n      for (let j = piece.length - 1; j >= 0; j--) {\\n        bitLength = Object(_opcodes__WEBPACK_IMPORTED_MODULE_0__[\\\"getValueBitLength\\\"])(piece[j]);\\n        value = inst & Object(_bitstrings__WEBPACK_IMPORTED_MODULE_3__[\\\"makeBitMask\\\"])(bitLength);\\n\\n        if (Object(_bitstrings__WEBPACK_IMPORTED_MODULE_3__[\\\"isBinaryLiteral\\\"])(piece[j])) {\\n          if (piece[j] === Object(_bitstrings__WEBPACK_IMPORTED_MODULE_3__[\\\"padBitString\\\"])(value.toString(2), bitLength)) {\\n            piece = piece[j];\\n            break;\\n          }\\n        }\\n        else {\\n          piece = piece[j];\\n          break;\\n        }\\n      }\\n    }\\n    else {\\n      bitLength = Object(_opcodes__WEBPACK_IMPORTED_MODULE_0__[\\\"getValueBitLength\\\"])(piece);\\n      value = inst & Object(_bitstrings__WEBPACK_IMPORTED_MODULE_3__[\\\"makeBitMask\\\"])(bitLength);\\n    }\\n\\n    if (Object(_bitstrings__WEBPACK_IMPORTED_MODULE_3__[\\\"isBinaryLiteral\\\"])(piece)) {\\n      inst >>>= bitLength;\\n      continue;\\n    }\\n\\n    values[piece] = value;\\n\\n    inst >>>= bitLength;\\n  }\\n\\n  return values;\\n}\\n\\nfunction _formatNumber(num, opts) {\\n  if (num === 0)\\n    return num.toString(opts.numBase);\\n\\n  let value = \\\"\\\";\\n  if (num < 0)\\n    value += \\\"-\\\";\\n\\n  if (opts.numBase === 16)\\n    value += \\\"0x\\\";\\n  else if (opts.numBase === 8)\\n    value += \\\"0o\\\";\\n  else if (opts.numBase === 2)\\n    value += \\\"0b\\\";\\n\\n  value += _applyCasing(Math.abs(num).toString(opts.numBase), opts.casing);\\n  return value;\\n}\\n\\nfunction _formatReg(regStr, opts) {\\n  let value = \\\"\\\";\\n  if (opts.include$)\\n    value += \\\"$\\\";\\n  value += _applyCasing(regStr, opts.casing);\\n  return value;\\n}\\n\\nfunction _formatOpcode(values, opts) {\\n  const pieces = values.op.split(\\\".\\\");\\n  for (let i = 0; i < pieces.length; i++) {\\n    if (pieces[i] === \\\"fmt\\\") {\\n      if (values.hasOwnProperty(\\\"fmt3\\\"))\\n        pieces[i] = Object(_regs__WEBPACK_IMPORTED_MODULE_1__[\\\"getFmt3Name\\\"])(values[\\\"fmt3\\\"]);\\n      else if (values.hasOwnProperty(\\\"fmt\\\"))\\n        pieces[i] = Object(_regs__WEBPACK_IMPORTED_MODULE_1__[\\\"getFmtName\\\"])(values[\\\"fmt\\\"]);\\n      else\\n        throw new Error(\\\"Format value not available\\\");\\n    }\\n    else if (pieces[i] === \\\"cond\\\") {\\n      if (values.hasOwnProperty(\\\"cond\\\"))\\n        pieces[i] = Object(_regs__WEBPACK_IMPORTED_MODULE_1__[\\\"getCondName\\\"])(values[\\\"cond\\\"]);\\n      else\\n        throw new Error(\\\"Condition value not available\\\");\\n    }\\n  }\\n  let opcode = pieces.join(\\\".\\\");\\n\\n  return _applyCasing(opcode, opts.casing);\\n}\\n\\nfunction _applyCasing(value, casing) {\\n  switch (casing) {\\n    case \\\"toLowerCase\\\":\\n      return value.toLowerCase();\\n\\n    case \\\"toUpperCase\\\":\\n    default:\\n      return value.toUpperCase();\\n  }\\n}\\n\\n\\n//# sourceURL=webpack://MIPSInst/./src/print.js?\");\n\n/***/ }),\n\n/***/ \"./src/regex.js\":\n/*!**********************!*\\\n  !*** ./src/regex.js ***!\n  \\**********************/\n/*! exports provided: getOpcode, makeRegexForOpcode, isReg, isFloatReg */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"getOpcode\\\", function() { return getOpcode; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"makeRegexForOpcode\\\", function() { return makeRegexForOpcode; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"isReg\\\", function() { return isReg; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"isFloatReg\\\", function() { return isFloatReg; });\\n/* harmony import */ var _regs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regs */ \\\"./src/regs.js\\\");\\n/* harmony import */ var _immediates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./immediates */ \\\"./src/immediates.js\\\");\\n\\n\\n\\nconst opRegex = \\\"([A-Za-z0-3.]+)\\\";\\nconst immRegex = \\\"(-)?0?([xbo]?)([A-Fa-f0-9]+)\\\";\\nconst regRegex = \\\"\\\\\\\\$?(\\\\\\\\w+)\\\";\\nconst floatRegRegex = \\\"\\\\\\\\$?[Ff]([0-9]+)\\\";\\n\\nconst opcodeRegex = new RegExp(\\\"^\\\\\\\\s*\\\" + opRegex);\\n\\n// Gets the op string from a given entire instruction.\\n// This is a general form (.fmt rather than .S, .D, etc.)\\nfunction getOpcode(str) {\\n  const match = opcodeRegex.exec(str);\\n  if (match) {\\n    const pieces = match[1].split(\\\".\\\"); // Could be .fmt, .cond.fmt, etc\\n    if (pieces.length === 1)\\n      return pieces[0].toLowerCase();\\n\\n    // Loop from the end, as the end has the .fmt for tricky things like .D.W\\n    let result = \\\"\\\";\\n    let foundFmt = false;\\n    let foundCond = false;\\n    for (let i = pieces.length - 1; i > 0; i--) {\\n      let piece = pieces[i];\\n      if (!foundFmt) {\\n        if (piece === \\\"fmt\\\" || Object(_regs__WEBPACK_IMPORTED_MODULE_0__[\\\"isFmtString\\\"])(piece)) {\\n          foundFmt = true;\\n          piece = \\\"fmt\\\";\\n        }\\n      }\\n\\n      if (!foundCond) {\\n        if (Object(_regs__WEBPACK_IMPORTED_MODULE_0__[\\\"isCondString\\\"])(piece)) {\\n          foundCond = true;\\n          piece = \\\"cond\\\";\\n        }\\n      }\\n\\n      result = \\\".\\\" + piece + result;\\n    }\\n\\n    return (pieces[0] + result).toLowerCase();\\n  }\\n  return null;\\n}\\n\\nfunction makeRegexForOpcode(opcodeObj) {\\n  const display = opcodeObj.display;\\n\\n  const parts = [opRegex];\\n\\n  for (let i = 0; i < display.length; i++) {\\n    const part = display[i];\\n    const optional = part.endsWith(\\\"?\\\");\\n\\n    let regexPart = \\\"\\\";\\n    if (optional)\\n      regexPart += \\\"(?:\\\";\\n\\n    if (display[i + 1] === \\\"(\\\") {\\n      if (optional)\\n        throw new Error(\\\"Not prepared to generate optional regex with parenthesis\\\");\\n\\n      if (display[i + 3] !== \\\")\\\")\\n        throw new Error(\\\"Not prepared to generate regex for multiple values in parenthesis\\\"); // Or no closing paren\\n\\n      regexPart += makeParenthesisRegex(getRegexForPart(part), getRegexForPart(display[i + 2]));\\n      i = i + 3;\\n    }\\n    else {\\n      regexPart += getRegexForPart(part);\\n    }\\n\\n    if (optional)\\n      regexPart += \\\"[,\\\\\\\\s]+)?\\\";\\n\\n    parts.push(regexPart);\\n  }\\n\\n  let regexStr =\\n    \\\"^\\\\\\\\s*\\\" +\\n    parts.reduce((str, next, index) => {\\n      if (index === parts.length - 1)\\n        return str + next;\\n\\n      // If it is an optional group, we already included the whitespace trailing.\\n      if (!next.startsWith(\\\"(?:\\\"))\\n        return str + next + \\\"[,\\\\\\\\s]+\\\";\\n\\n      return str + next;\\n    }, \\\"\\\") +\\n    \\\"\\\\\\\\s*$\\\";\\n\\n  return new RegExp(regexStr);\\n}\\n\\nfunction getRegexForPart(part) {\\n  if (isReg(part))\\n    return regRegex;\\n  if (isFloatReg(part))\\n    return floatRegRegex;\\n\\n  if (Object(_immediates__WEBPACK_IMPORTED_MODULE_1__[\\\"getImmFormatDetails\\\"])(part))\\n    return immRegex;\\n\\n  throw new Error(`Unrecognized display entry ${part}`);\\n}\\n\\nfunction makeParenthesisRegex(regex1, regex2) {\\n  return regex1 + \\\"\\\\\\\\s*\\\" + \\\"\\\\\\\\(?\\\" + regex2 + \\\"\\\\\\\\)?\\\";\\n}\\n\\nfunction isReg(entry) {\\n  if (!entry)\\n    return false;\\n\\n  switch (entry.substr(0, 2)) {\\n    case \\\"rs\\\":\\n    case \\\"rt\\\":\\n    case \\\"rd\\\":\\n      return true;\\n  }\\n  return false;\\n}\\n\\nfunction isFloatReg(entry) {\\n  if (!entry)\\n    return false;\\n\\n  switch (entry.substr(0, 2)) {\\n    case \\\"fs\\\":\\n    case \\\"ft\\\":\\n    case \\\"fd\\\":\\n      return true;\\n  }\\n  return false;\\n}\\n\\n\\n//# sourceURL=webpack://MIPSInst/./src/regex.js?\");\n\n/***/ }),\n\n/***/ \"./src/regs.js\":\n/*!*********************!*\\\n  !*** ./src/regs.js ***!\n  \\*********************/\n/*! exports provided: getRegBits, getRegName, getFloatRegName, getFmtBits, getFmtName, getFmt3Bits, getFmt3Name, isFmtString, getCondBits, getCondName, isCondString */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"getRegBits\\\", function() { return getRegBits; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"getRegName\\\", function() { return getRegName; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"getFloatRegName\\\", function() { return getFloatRegName; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"getFmtBits\\\", function() { return getFmtBits; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"getFmtName\\\", function() { return getFmtName; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"getFmt3Bits\\\", function() { return getFmt3Bits; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"getFmt3Name\\\", function() { return getFmt3Name; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"isFmtString\\\", function() { return isFmtString; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"getCondBits\\\", function() { return getCondBits; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"getCondName\\\", function() { return getCondName; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"isCondString\\\", function() { return isCondString; });\\nconst regs = {\\n  r0: 0,\\n  zero: 0,\\n  at: 1,\\n  v0: 2,\\n  v1: 3,\\n  a0: 4,\\n  a1: 5,\\n  a2: 6,\\n  a3: 7,\\n  t0: 8,\\n  t1: 9,\\n  t2: 10,\\n  t3: 11,\\n  t4: 12,\\n  t5: 13,\\n  t6: 14,\\n  t7: 15,\\n  s0: 16,\\n  s1: 17,\\n  s2: 18,\\n  s3: 19,\\n  s4: 20,\\n  s5: 21,\\n  s6: 22,\\n  s7: 23,\\n  t8: 24,\\n  t9: 25,\\n  k0: 26,\\n  k1: 27,\\n  gp: 28,\\n  sp: 29,\\n  fp: 30,\\n  ra: 31\\n};\\n\\nfunction getRegBits(reg) {\\n  if (!reg)\\n    return undefined;\\n  return regs[reg.toLowerCase()];\\n}\\n\\nfunction getRegName(bits) {\\n  for (let name in regs) {\\n    if (regs[name] === bits)\\n      return name;\\n  }\\n  return \\\"\\\";\\n}\\n\\nfunction getFloatRegName(bits) {\\n  if (typeof bits !== \\\"number\\\")\\n    throw new Error(\\\"getFloatRegName encountered non-number\\\");\\n\\n  return \\\"F\\\" + bits;\\n}\\n\\nconst fmts = {\\n  S: 16,\\n  D: 17,\\n  W: 20,\\n  L: 21,\\n};\\n\\nfunction getFmtBits(fmtStr) {\\n  return fmts[fmtStr.toUpperCase()];\\n}\\n\\nfunction getFmtName(bits) {\\n  for (let name in fmts) {\\n    if (fmts[name] === bits)\\n      return name;\\n  }\\n  return \\\"\\\";\\n}\\n\\nconst fmt3s = {\\n  S: 0,\\n  D: 1,\\n  W: 4,\\n  L: 5,\\n};\\n\\nfunction getFmt3Bits(fmtStr) {\\n  return fmt3s[fmtStr.toUpperCase()];\\n}\\n\\nfunction getFmt3Name(bits) {\\n  for (let name in fmt3s) {\\n    if (fmt3s[name] === bits)\\n      return name;\\n  }\\n  return \\\"\\\";\\n}\\n\\nfunction isFmtString(fmtStr) {\\n  return fmts.hasOwnProperty(fmtStr.toUpperCase()) || fmt3s.hasOwnProperty(fmtStr.toUpperCase());\\n}\\n\\nconst conds = {\\n  F: 0,\\n  UN: 1,\\n  EQ: 2,\\n  UEQ: 3,\\n  OLT: 4,\\n  ULT: 5,\\n  OLE: 6,\\n  ULE: 7,\\n  SF: 8,\\n  NGLE: 9,\\n  SEQ: 10,\\n  NGL: 11,\\n  LT: 12,\\n  NGE: 13,\\n  LE: 14,\\n  NGT: 15,\\n};\\n\\nfunction getCondBits(condStr) {\\n  return conds[condStr.toUpperCase()];\\n}\\n\\nfunction getCondName(bits) {\\n  for (let name in conds) {\\n    if (conds[name] === bits)\\n      return name;\\n  }\\n  return \\\"\\\";\\n}\\n\\nfunction isCondString(condStr) {\\n  return conds.hasOwnProperty(condStr.toUpperCase());\\n}\\n\\n\\n//# sourceURL=webpack://MIPSInst/./src/regs.js?\");\n\n/***/ })\n\n/******/ });\n});\n\n//# sourceURL=webpack://MIPSAssem/./node_modules/mips-inst/dist/mipsinst.js?");

/***/ }),

/***/ "./src/assembler.ts":
/*!**************************!*\
  !*** ./src/assembler.ts ***!
  \**************************/
/*! exports provided: assemble */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assemble\", function() { return assemble; });\n/* harmony import */ var mips_inst__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mips-inst */ \"./node_modules/mips-inst/dist/mipsinst.js\");\n/* harmony import */ var mips_inst__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mips_inst__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ \"./src/types.ts\");\n/* harmony import */ var _directives__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./directives */ \"./src/directives.ts\");\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./labels */ \"./src/labels.ts\");\n/* harmony import */ var _symbols__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./symbols */ \"./src/symbols.ts\");\n/* harmony import */ var _expressions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./expressions */ \"./src/expressions.ts\");\n\n\n\n\n\n\n/**\n * Assembles the given input instructions.\n * @param input\n * @param opts\n */\nfunction assemble(input, opts) {\n    opts = opts || {};\n    var arr = _ensureArray(input);\n    arr = arr.filter(function (s) { return typeof s === \"string\"; });\n    arr = _stripComments(arr);\n    arr = arr.map(function (s) { return s.trim(); });\n    arr = arr.filter(Boolean);\n    var state = _makeNewAssemblerState();\n    var outStrs = [];\n    // First pass, calculate label positions.\n    arr = arr.map(function (line) {\n        state.line = line;\n        var parsedLabel;\n        while (parsedLabel = Object(_labels__WEBPACK_IMPORTED_MODULE_3__[\"parseGlobalLabel\"])(state)) {\n            state.line = line = line.substr(parsedLabel.length + 1).trim();\n        }\n        if (line[0] === \".\") {\n            Object(_expressions__WEBPACK_IMPORTED_MODULE_5__[\"parseExpressionsOnCurrentLine\"])(state);\n            Object(_directives__WEBPACK_IMPORTED_MODULE_2__[\"handleDirective\"])(state);\n            return line; // Keep directives for second pass.\n        }\n        // If !line, then only labels were on the line.\n        if (line) {\n            state.outIndex += 4;\n        }\n        return line;\n    });\n    // Re-filter out empty lines.\n    arr = arr.filter(Boolean);\n    state.buffer = opts.buffer || new ArrayBuffer(state.outIndex);\n    state.dataView = new DataView(state.buffer);\n    state.memPos = 0;\n    state.outIndex = 0;\n    state.currentPass = _types__WEBPACK_IMPORTED_MODULE_1__[\"AssemblerPhase\"].secondPass;\n    // Second pass, assemble!\n    arr.forEach(function (line) {\n        state.line = line;\n        state.lineExpressions = [];\n        state.evaluatedLineExpressions = [];\n        if (line[0] === \".\") {\n            Object(_expressions__WEBPACK_IMPORTED_MODULE_5__[\"evaluateExpressionsOnCurrentLine\"])(state);\n            Object(_directives__WEBPACK_IMPORTED_MODULE_2__[\"handleDirective\"])(state);\n            return;\n        }\n        // Start a new \"area\" if we hit a global symbol boundary.\n        var globalSymbol = Object(_symbols__WEBPACK_IMPORTED_MODULE_4__[\"getSymbolByValue\"])(state, state.memPos + state.outIndex);\n        if (globalSymbol !== null) {\n            state.currentLabel = globalSymbol;\n        }\n        // Apply any built-in functions, symbols.\n        line = state.line = Object(_expressions__WEBPACK_IMPORTED_MODULE_5__[\"evaluateExpressionsOnCurrentLine\"])(state);\n        if (opts.text)\n            outStrs.push(line);\n        // At this point, we should be able to parse the instruction.\n        var inst = Object(mips_inst__WEBPACK_IMPORTED_MODULE_0__[\"parse\"])(line);\n        state.dataView.setUint32(state.outIndex, inst);\n        state.outIndex += 4;\n    });\n    if (opts.text)\n        return outStrs;\n    return state.buffer;\n}\n/** Strips single line ; or // comments. */\nfunction _stripComments(input) {\n    return input.map(function (line) {\n        var semicolonIndex = line.indexOf(\";\");\n        var slashesIndex = line.indexOf(\"//\");\n        if (semicolonIndex === -1 && slashesIndex === -1)\n            return line; // No comments\n        var removalIndex = semicolonIndex;\n        if (removalIndex === -1)\n            removalIndex = slashesIndex;\n        else if (slashesIndex !== -1)\n            removalIndex = Math.min(semicolonIndex, slashesIndex);\n        return line.substr(0, removalIndex);\n    });\n}\nfunction _makeNewAssemblerState() {\n    return {\n        buffer: null,\n        dataView: null,\n        line: \"\",\n        memPos: 0,\n        outIndex: 0,\n        symbols: Object.create(null),\n        symbolsByValue: Object.create(null),\n        currentLabel: null,\n        localSymbols: Object.create(null),\n        currentPass: _types__WEBPACK_IMPORTED_MODULE_1__[\"AssemblerPhase\"].firstPass,\n        lineExpressions: [],\n        evaluatedLineExpressions: null,\n    };\n}\nfunction _ensureArray(input) {\n    if (typeof input === \"string\")\n        return input.split(/\\r?\\n/);\n    if (!Array.isArray(input))\n        throw new Error(\"Input must be a string or array of strings\");\n    return input;\n}\n\n\n//# sourceURL=webpack://MIPSAssem/./src/assembler.ts?");

/***/ }),

/***/ "./src/directives.ts":
/*!***************************!*\
  !*** ./src/directives.ts ***!
  \***************************/
/*! exports provided: handleDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"handleDirective\", function() { return handleDirective; });\n/* harmony import */ var _directives_definelabel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./directives/definelabel */ \"./src/directives/definelabel.ts\");\n/* harmony import */ var _directives_org__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./directives/org */ \"./src/directives/org.ts\");\n/* harmony import */ var _directives_orga__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./directives/orga */ \"./src/directives/orga.ts\");\n/* harmony import */ var _directives_align__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./directives/align */ \"./src/directives/align.ts\");\n/* harmony import */ var _directives_skip__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./directives/skip */ \"./src/directives/skip.ts\");\n/* harmony import */ var _directives_fill__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./directives/fill */ \"./src/directives/fill.ts\");\n/* harmony import */ var _directives_ascii__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./directives/ascii */ \"./src/directives/ascii.ts\");\n/* harmony import */ var _directives_byte__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./directives/byte */ \"./src/directives/byte.ts\");\n/* harmony import */ var _directives_halfword__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./directives/halfword */ \"./src/directives/halfword.ts\");\n/* harmony import */ var _directives_word__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./directives/word */ \"./src/directives/word.ts\");\n/* harmony import */ var _directives_float__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./directives/float */ \"./src/directives/float.ts\");\n\n\n\n\n\n\n\n\n\n\n\nfunction getDirectives() {\n    return [\n        _directives_definelabel__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n        _directives_org__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n        _directives_orga__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n        _directives_align__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n        _directives_skip__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n        _directives_fill__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\n        _directives_ascii__WEBPACK_IMPORTED_MODULE_6__[\"default\"],\n        _directives_byte__WEBPACK_IMPORTED_MODULE_7__[\"default\"],\n        _directives_halfword__WEBPACK_IMPORTED_MODULE_8__[\"default\"],\n        _directives_word__WEBPACK_IMPORTED_MODULE_9__[\"default\"],\n        _directives_float__WEBPACK_IMPORTED_MODULE_10__[\"default\"],\n    ];\n}\n/**\n * Runs a directive, which changes the assembler state.\n * @param state Current assembler state.\n */\nfunction handleDirective(state) {\n    if (getDirectives().some(function (directive) { return directive(state); }))\n        return;\n    throw new Error(\"handleDirective: Unrecongized directive \" + state.line);\n}\n\n\n//# sourceURL=webpack://MIPSAssem/./src/directives.ts?");

/***/ }),

/***/ "./src/directives/align.ts":
/*!*********************************!*\
  !*** ./src/directives/align.ts ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return align; });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"./src/types.ts\");\n/* harmony import */ var _functions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../functions */ \"./src/functions.ts\");\n\n\nvar alignRegex = /^\\.align\\s+/i;\n/**\n * .align pads zeroes until the output position is aligned\n * with the specified alignment.\n * @param state Current assembler state.\n */\nfunction align(state) {\n    var results = state.line.match(alignRegex);\n    if (results === null)\n        return false; // Not .align\n    if (state.lineExpressions.length !== 1) {\n        throw new Error(\".align requires one power of two number argument\");\n    }\n    var imm = Object(_functions__WEBPACK_IMPORTED_MODULE_1__[\"runFunction\"])(state.lineExpressions[0], state);\n    if (imm === null)\n        throw new Error(\"Could not parse .align immediate \" + state.lineExpressions);\n    if (typeof imm !== \"number\")\n        throw new Error(\".align requires one power of two number argument\");\n    if (imm % 2)\n        throw new Error(\".align directive requires a power of two.\");\n    if (imm < 0)\n        throw new Error(\".align directive cannot align by a negative value.\");\n    while (state.outIndex % imm) {\n        if (state.currentPass === _types__WEBPACK_IMPORTED_MODULE_0__[\"AssemblerPhase\"].secondPass) {\n            state.dataView.setUint8(state.outIndex, 0);\n        }\n        state.outIndex++;\n    }\n    return true;\n}\n\n\n//# sourceURL=webpack://MIPSAssem/./src/directives/align.ts?");

/***/ }),

/***/ "./src/directives/ascii.ts":
/*!*********************************!*\
  !*** ./src/directives/ascii.ts ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return ascii; });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"./src/types.ts\");\n/* harmony import */ var _functions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../functions */ \"./src/functions.ts\");\n\n\nvar regexAscii = /^\\.ascii\\s+/i;\nvar regexAsciiZ = /^\\.asciiz\\s+/i;\n/**\n * .ascii value[,...]\n * .asciiz value[,...]\n *\n * `value` can either be a string or byte value.\n * ex: \"string\"\n * ex: 'string'\n * ex: 0x0A\n *\n * @param state Current assembler state.\n */\nfunction ascii(state) {\n    var appendZero = false;\n    var results = state.line.match(regexAscii);\n    if (!results) {\n        results = state.line.match(regexAsciiZ);\n        if (!results)\n            return false;\n        appendZero = true;\n    }\n    var numbers = [];\n    var lineExps = state.lineExpressions;\n    lineExps.forEach(function (expr) {\n        var value = Object(_functions__WEBPACK_IMPORTED_MODULE_1__[\"runFunction\"])(expr, state);\n        if (value === null)\n            throw new Error(\"Could not parse .ascii value \" + expr);\n        if (typeof value === \"number\") {\n            numbers.push(value);\n        }\n        else if (typeof value === \"string\") {\n            for (var i = 0; i < value.length; i++) {\n                numbers.push(value.charCodeAt(i));\n            }\n        }\n    });\n    if (appendZero)\n        numbers.push(0); // Add NULL byte.\n    if (state.currentPass === _types__WEBPACK_IMPORTED_MODULE_0__[\"AssemblerPhase\"].secondPass) {\n        for (var i = 0; i < numbers.length; i++) {\n            if (numbers[i] < 0)\n                state.dataView.setInt8(state.outIndex + i, numbers[i]);\n            else\n                state.dataView.setUint8(state.outIndex + i, numbers[i]);\n        }\n    }\n    state.outIndex += numbers.length;\n    return true;\n}\n\n\n//# sourceURL=webpack://MIPSAssem/./src/directives/ascii.ts?");

/***/ }),

/***/ "./src/directives/byte.ts":
/*!********************************!*\
  !*** ./src/directives/byte.ts ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return byte; });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"./src/types.ts\");\n/* harmony import */ var _directiveHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./directiveHelpers */ \"./src/directives/directiveHelpers.ts\");\n\n\nvar regexByte = Object(_directiveHelpers__WEBPACK_IMPORTED_MODULE_1__[\"makeNumericExprListRegExp\"])(\"byte\");\nvar regexDb = Object(_directiveHelpers__WEBPACK_IMPORTED_MODULE_1__[\"makeNumericExprListRegExp\"])(\"db\");\n/**\n * .byte value[,...]\n * .db value[,...]\n * @param state Current assembler state.\n */\nfunction byte(state) {\n    var results = state.line.match(regexByte);\n    if (!results) {\n        results = state.line.match(regexDb);\n        if (!results)\n            return false;\n    }\n    if (state.currentPass === _types__WEBPACK_IMPORTED_MODULE_0__[\"AssemblerPhase\"].secondPass) {\n        if (!state.evaluatedLineExpressions.length) {\n            throw new Error(\".byte directive requires arguments\");\n        }\n        if (state.evaluatedLineExpressions.some(function (v) { return typeof v !== \"number\"; })) {\n            throw new Error(\".byte directive requires numeric arguments\");\n        }\n        var numbers = state.evaluatedLineExpressions;\n        for (var i = 0; i < numbers.length; i++) {\n            if (numbers[i] < 0)\n                state.dataView.setInt8(state.outIndex + i, numbers[i]);\n            else\n                state.dataView.setUint8(state.outIndex + i, numbers[i]);\n        }\n    }\n    state.outIndex += state.lineExpressions.length;\n    return true;\n}\n\n\n//# sourceURL=webpack://MIPSAssem/./src/directives/byte.ts?");

/***/ }),

/***/ "./src/directives/definelabel.ts":
/*!***************************************!*\
  !*** ./src/directives/definelabel.ts ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return definelabel; });\n/* harmony import */ var _symbols__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../symbols */ \"./src/symbols.ts\");\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../labels */ \"./src/labels.ts\");\n/* harmony import */ var _functions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../functions */ \"./src/functions.ts\");\n\n\n\nvar defineLabelRegex = new RegExp(\"^\\\\.definelabel\\\\s+(\" + _labels__WEBPACK_IMPORTED_MODULE_1__[\"LABEL_REGEX_STR\"] + \")[\\\\s,]+([-\\\\w\" + _labels__WEBPACK_IMPORTED_MODULE_1__[\"LABEL_CHARS\"] + \"]+)$\", \"i\");\n/**\n * .definelabel adds a new symbol.\n * @param state Current assembler state.\n */\nfunction definelabel(state) {\n    var results = state.line.match(defineLabelRegex);\n    if (results === null)\n        return false; // Not .definelabel\n    if (state.lineExpressions.length !== 2) {\n        throw new Error(\".definelabel must have two arguments, a label name and value\");\n    }\n    var name = state.lineExpressions[0];\n    var value = Object(_functions__WEBPACK_IMPORTED_MODULE_2__[\"runFunction\"])(state.lineExpressions[1], state);\n    if (typeof value !== \"number\") {\n        throw new Error(\"The value in .definelabel must evaluate to a numeric value\");\n    }\n    Object(_symbols__WEBPACK_IMPORTED_MODULE_0__[\"addSymbol\"])(state, name, value);\n    return true; // Symbol added\n}\n\n\n//# sourceURL=webpack://MIPSAssem/./src/directives/definelabel.ts?");

/***/ }),

/***/ "./src/directives/directiveHelpers.ts":
/*!********************************************!*\
  !*** ./src/directives/directiveHelpers.ts ***!
  \********************************************/
/*! exports provided: makeNumericExprListRegExp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"makeNumericExprListRegExp\", function() { return makeNumericExprListRegExp; });\n/* harmony import */ var _expressions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../expressions */ \"./src/expressions.ts\");\n\nfunction makeNumericExprListRegExp(directiveAlias) {\n    return new RegExp(\"^\\\\.\" + directiveAlias + \"\\\\s+([\" + _expressions__WEBPACK_IMPORTED_MODULE_0__[\"EXPR_CHARS\"] + \"]+)$\", \"i\");\n}\n\n\n//# sourceURL=webpack://MIPSAssem/./src/directives/directiveHelpers.ts?");

/***/ }),

/***/ "./src/directives/fill.ts":
/*!********************************!*\
  !*** ./src/directives/fill.ts ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return fill; });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"./src/types.ts\");\n/* harmony import */ var _functions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../functions */ \"./src/functions.ts\");\n\n\nvar regex = /^\\.fill\\s+/i;\n/**\n * .fill length[,value]\n * @param state Current assembler state.\n */\nfunction fill(state) {\n    var results = state.line.match(regex);\n    if (results === null)\n        return false;\n    if (!state.lineExpressions.length || state.lineExpressions.length > 2) {\n        throw new Error(\".fill directive takes a length and optional value\");\n    }\n    var length, value;\n    length = Object(_functions__WEBPACK_IMPORTED_MODULE_1__[\"runFunction\"])(state.lineExpressions[0], state);\n    if (typeof length !== \"number\")\n        throw new Error(\"Could not parse .fill length \" + state.lineExpressions[0]);\n    if (length < 0)\n        throw new Error(\".fill length must be positive.\");\n    if (state.lineExpressions.length > 1) {\n        value = Object(_functions__WEBPACK_IMPORTED_MODULE_1__[\"runFunction\"])(state.lineExpressions[1], state);\n        if (typeof value !== \"number\")\n            throw new Error(\"Could not parse .fill value \" + state.lineExpressions[1]);\n    }\n    else\n        value = 0;\n    if (state.currentPass === _types__WEBPACK_IMPORTED_MODULE_0__[\"AssemblerPhase\"].secondPass) {\n        for (var i = 0; i < length; i++)\n            state.dataView.setInt8(state.outIndex + i, value);\n    }\n    state.outIndex += length;\n    return true;\n}\n\n\n//# sourceURL=webpack://MIPSAssem/./src/directives/fill.ts?");

/***/ }),

/***/ "./src/directives/float.ts":
/*!*********************************!*\
  !*** ./src/directives/float.ts ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return word; });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"./src/types.ts\");\n\nvar regexFloat = /^\\.float\\s+([,-\\.\\w\\s\\(\\)]+)$/i;\n/**\n * Writes 32-bit float values.\n * .float value[,...]\n * @param state Current assembler state.\n */\nfunction word(state) {\n    var results = state.line.match(regexFloat);\n    if (!results) {\n        return false;\n    }\n    var valuesString = results[1];\n    var pieces = valuesString.split(\",\")\n        .map(function (s) { return s.trim(); })\n        .filter(function (s) { return !!s; });\n    if (state.currentPass === _types__WEBPACK_IMPORTED_MODULE_0__[\"AssemblerPhase\"].secondPass) {\n        var numbers = pieces.map(function (s) {\n            var imm = parseFloat(s);\n            if (imm === null)\n                throw new Error(\"Could not parse .float immediate \" + s);\n            return imm;\n        });\n        for (var i = 0; i < numbers.length; i++) {\n            state.dataView.setFloat32(state.outIndex + (i * 4), numbers[i]);\n        }\n    }\n    state.outIndex += 4 * pieces.length;\n    return true;\n}\n\n\n//# sourceURL=webpack://MIPSAssem/./src/directives/float.ts?");

/***/ }),

/***/ "./src/directives/halfword.ts":
/*!************************************!*\
  !*** ./src/directives/halfword.ts ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return halfword; });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"./src/types.ts\");\n/* harmony import */ var _directiveHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./directiveHelpers */ \"./src/directives/directiveHelpers.ts\");\n\n\nvar regexHalfword = Object(_directiveHelpers__WEBPACK_IMPORTED_MODULE_1__[\"makeNumericExprListRegExp\"])(\"halfword\");\nvar regexDh = Object(_directiveHelpers__WEBPACK_IMPORTED_MODULE_1__[\"makeNumericExprListRegExp\"])(\"dh\");\n/**\n * Writes 16-bit values.\n * .halfword value[,...]\n * .dh value[,...]\n * @param state Current assembler state.\n */\nfunction halfword(state) {\n    var results = state.line.match(regexHalfword);\n    if (!results) {\n        results = state.line.match(regexDh);\n        if (!results)\n            return false;\n    }\n    if (state.currentPass === _types__WEBPACK_IMPORTED_MODULE_0__[\"AssemblerPhase\"].secondPass) {\n        if (!state.evaluatedLineExpressions.length) {\n            throw new Error(\".halfword directive requires arguments\");\n        }\n        if (state.evaluatedLineExpressions.some(function (v) { return typeof v !== \"number\"; })) {\n            throw new Error(\".halfword directive requires numeric arguments\");\n        }\n        var numbers = state.evaluatedLineExpressions;\n        for (var i = 0; i < numbers.length; i++) {\n            if (numbers[i] < 0)\n                state.dataView.setInt16(state.outIndex + (i * 2), numbers[i]);\n            else\n                state.dataView.setUint16(state.outIndex + (i * 2), numbers[i]);\n        }\n    }\n    state.outIndex += 2 * state.lineExpressions.length;\n    return true;\n}\n\n\n//# sourceURL=webpack://MIPSAssem/./src/directives/halfword.ts?");

/***/ }),

/***/ "./src/directives/org.ts":
/*!*******************************!*\
  !*** ./src/directives/org.ts ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return orga; });\n/* harmony import */ var _functions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../functions */ \"./src/functions.ts\");\n\nvar orgRegex = /^\\.org\\s+/i;\n/**\n * .org changes the effective memory position.\n * @param state Current assembler state.\n */\nfunction orga(state) {\n    var results = state.line.match(orgRegex);\n    if (results === null)\n        return false; // Not .org\n    if (state.lineExpressions.length !== 1) {\n        throw new Error(\".org directive requires one numeric argument\");\n    }\n    var imm = Object(_functions__WEBPACK_IMPORTED_MODULE_0__[\"runFunction\"])(state.lineExpressions[0], state);\n    if (typeof imm !== \"number\")\n        throw new Error(\"Could not parse .org immediate \" + imm);\n    if (imm < 0)\n        throw new Error(\".org directive cannot be negative\");\n    state.memPos = imm >>> 0; // Better be 32-bit\n    return true;\n}\n\n\n//# sourceURL=webpack://MIPSAssem/./src/directives/org.ts?");

/***/ }),

/***/ "./src/directives/orga.ts":
/*!********************************!*\
  !*** ./src/directives/orga.ts ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return orga; });\n/* harmony import */ var _functions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../functions */ \"./src/functions.ts\");\n\nvar orgaRegex = /^\\.orga\\s+/i;\n/**\n * .orga updates the current output buffer index.\n * @param state Current assembler state.\n */\nfunction orga(state) {\n    var results = state.line.match(orgaRegex);\n    if (results === null)\n        return false; // Not .orga\n    if (state.lineExpressions.length !== 1) {\n        throw new Error(\".orga directive requires one numeric argument\");\n    }\n    var imm = Object(_functions__WEBPACK_IMPORTED_MODULE_0__[\"runFunction\"])(state.lineExpressions[0], state);\n    if (typeof imm !== \"number\")\n        throw new Error(\"Could not parse .orga immediate \" + imm);\n    if (imm < 0)\n        throw new Error(\".orga directive cannot be negative.\");\n    state.outIndex = imm >>> 0; // Better be 32-bit\n    return true;\n}\n\n\n//# sourceURL=webpack://MIPSAssem/./src/directives/orga.ts?");

/***/ }),

/***/ "./src/directives/skip.ts":
/*!********************************!*\
  !*** ./src/directives/skip.ts ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return skip; });\n/* harmony import */ var _functions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../functions */ \"./src/functions.ts\");\n\nvar regex = /^\\.skip\\s+/i;\n/**\n * .skip passes over a given amout of bytes without overwriting them.\n * @param state Current assembler state.\n */\nfunction skip(state) {\n    var results = state.line.match(regex);\n    if (results === null)\n        return false;\n    if (state.lineExpressions.length !== 1) {\n        throw new Error(\".skip directive requires one numeric argument\");\n    }\n    var imm = Object(_functions__WEBPACK_IMPORTED_MODULE_0__[\"runFunction\"])(state.lineExpressions[0], state);\n    if (typeof imm !== \"number\")\n        throw new Error(\"Could not parse .skip immediate \" + imm);\n    if (imm < 0)\n        throw new Error(\".skip directive cannot skip a negative length.\");\n    state.outIndex += imm;\n    return true;\n}\n\n\n//# sourceURL=webpack://MIPSAssem/./src/directives/skip.ts?");

/***/ }),

/***/ "./src/directives/word.ts":
/*!********************************!*\
  !*** ./src/directives/word.ts ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return word; });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"./src/types.ts\");\n/* harmony import */ var _directiveHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./directiveHelpers */ \"./src/directives/directiveHelpers.ts\");\n\n\nvar regexWord = Object(_directiveHelpers__WEBPACK_IMPORTED_MODULE_1__[\"makeNumericExprListRegExp\"])(\"word\");\nvar regexDw = Object(_directiveHelpers__WEBPACK_IMPORTED_MODULE_1__[\"makeNumericExprListRegExp\"])(\"dw\");\n/**\n * Writes 32-bit values.\n * .word value[,...]\n * .dw value[,...]\n * @param state Current assembler state.\n */\nfunction word(state) {\n    var results = state.line.match(regexWord);\n    if (!results) {\n        results = state.line.match(regexDw);\n        if (!results)\n            return false;\n    }\n    if (state.currentPass === _types__WEBPACK_IMPORTED_MODULE_0__[\"AssemblerPhase\"].secondPass) {\n        if (!state.evaluatedLineExpressions.length) {\n            throw new Error(\".word directive requires arguments\");\n        }\n        if (state.evaluatedLineExpressions.some(function (v) { return typeof v !== \"number\"; })) {\n            throw new Error(\".word directive requires numeric arguments\");\n        }\n        var numbers = state.evaluatedLineExpressions;\n        for (var i = 0; i < numbers.length; i++) {\n            if (numbers[i] < 0)\n                state.dataView.setInt32(state.outIndex + (i * 4), numbers[i]);\n            else\n                state.dataView.setUint32(state.outIndex + (i * 4), numbers[i]);\n        }\n    }\n    state.outIndex += 4 * state.lineExpressions.length;\n    return true;\n}\n\n\n//# sourceURL=webpack://MIPSAssem/./src/directives/word.ts?");

/***/ }),

/***/ "./src/expressions.ts":
/*!****************************!*\
  !*** ./src/expressions.ts ***!
  \****************************/
/*! exports provided: EXPR_CHARS, parseExpressionsOnCurrentLine, evaluateExpressionsOnCurrentLine */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EXPR_CHARS\", function() { return EXPR_CHARS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parseExpressionsOnCurrentLine\", function() { return parseExpressionsOnCurrentLine; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"evaluateExpressionsOnCurrentLine\", function() { return evaluateExpressionsOnCurrentLine; });\n/* harmony import */ var _functions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions */ \"./src/functions.ts\");\n/* harmony import */ var _immediates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./immediates */ \"./src/immediates.ts\");\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./labels */ \"./src/labels.ts\");\n\n\n\nvar EXPR_CHARS = \",-\\\\w\\\\s\\\\(\\\\)\" + _labels__WEBPACK_IMPORTED_MODULE_2__[\"LABEL_CHARS\"];\nfunction parseExpressionsOnCurrentLine(state) {\n    var line = state.line;\n    var firstSpaceIndex = line.indexOf(\" \");\n    if (firstSpaceIndex === -1) {\n        state.lineExpressions = [];\n        return; // Must not have any arguments, there would need to be a space for those.\n    }\n    var exprList = line.substr(firstSpaceIndex + 1);\n    var exprs = splitExpressionList(exprList);\n    state.lineExpressions = exprs;\n}\nfunction evaluateExpressionsOnCurrentLine(state) {\n    var line = state.line;\n    var firstSpaceIndex = line.indexOf(\" \");\n    if (firstSpaceIndex === -1)\n        return line; // Must not have any arguments, there would need to be a space for those.\n    var firstPiece = line.substring(0, firstSpaceIndex);\n    var exprList = line.substr(firstSpaceIndex + 1);\n    var exprs = splitExpressionList(exprList);\n    state.lineExpressions = exprs;\n    if (exprs.length > 0) {\n        var evaluatedExprs = exprs.map(function (expr, i) {\n            var evaluated = Object(_functions__WEBPACK_IMPORTED_MODULE_0__[\"runFunction\"])(expr, state);\n            // For the last piece, do extra logic to fix branch values.\n            if (typeof evaluated === \"number\" && i === exprs.length - 1) {\n                evaluated = _fixBranch(firstPiece, evaluated, state);\n            }\n            return evaluated;\n        });\n        state.evaluatedLineExpressions = evaluatedExprs;\n        line = firstPiece + \" \" + _formatEvaluatedExprs(evaluatedExprs, exprs).join(\" \");\n    }\n    return line;\n}\nfunction _formatEvaluatedExprs(values, originalValues) {\n    return values.map(function (value, i) {\n        if (typeof value === \"number\") {\n            return Object(_immediates__WEBPACK_IMPORTED_MODULE_1__[\"formatImmediate\"])(value);\n        }\n        if (value === null) {\n            return originalValues[i];\n        }\n        return value;\n    });\n}\n/** Transforms branches from absolute to relative. */\nfunction _fixBranch(inst, offset, state) {\n    if (_instIsBranch(inst)) {\n        var memOffset = state.memPos + state.outIndex;\n        var diff = ((offset - memOffset) / 4) - 1;\n        return diff;\n    }\n    return offset; // Leave as is.\n}\nfunction _instIsBranch(inst) {\n    inst = inst.toLowerCase();\n    if (inst[0] !== \"b\")\n        return false;\n    switch (inst) {\n        case \"bc1f\":\n        case \"bc1fl\":\n        case \"bc1t\":\n        case \"bc1tl\":\n        case \"beq\":\n        case \"beql\":\n        case \"bgez\":\n        case \"bgezal\":\n        case \"bgezall\":\n        case \"bgezl\":\n        case \"bgtz\":\n        case \"bgtzl\":\n        case \"blez\":\n        case \"blezl\":\n        case \"bltz\":\n        case \"bltzal\":\n        case \"bltzall\":\n        case \"bltzl\":\n        case \"bne\":\n        case \"bnel\":\n            return true;\n    }\n    return false;\n}\nfunction splitExpressionList(str) {\n    var pieces = [];\n    var currentPiece = \"\";\n    var currentStrQuoteChar = \"\"; // When set, we're writing a string\n    var currentParenLevel = 0; // When > 0, we're inside a parenthesis grouper\n    var escaped = false;\n    var prevChar = \"\";\n    function writeToCurrentPiece(char) {\n        currentPiece += char;\n    }\n    function endCurrentPiece() {\n        while (charSplitsExpressions(currentPiece[currentPiece.length - 1])) {\n            currentPiece = currentPiece.slice(0, -1);\n        }\n        currentPiece = currentPiece.trim(); // Sanity check\n        // We actually have only seen white spaces, so don't create a separate piece yet.\n        if (!currentPiece)\n            return;\n        pieces.push(currentPiece);\n        currentPiece = \"\";\n    }\n    function endPieceIfApplicable() {\n        if (currentStrQuoteChar || currentParenLevel)\n            return; // Still need to close a string/group, can't end piece.\n        if (!charSplitsExpressions(prevChar))\n            return; // Still writing something.\n        endCurrentPiece();\n    }\n    for (var i = 0; i < str.length; i++) {\n        var char = str[i];\n        endPieceIfApplicable();\n        switch (char) {\n            case \"\\\\\":\n                if (!escaped) {\n                    escaped = true;\n                }\n                break;\n            case \"(\":\n                if (!escaped && !currentStrQuoteChar) {\n                    currentParenLevel++;\n                }\n                break;\n            case \")\":\n                if (!escaped && !currentStrQuoteChar) {\n                    if (currentParenLevel <= 0) {\n                        throw new Error(\"Imbalanced parenthesis in expression: \" + str);\n                    }\n                    currentParenLevel--;\n                }\n                break;\n            case \"\\\"\":\n            case \"'\":\n                if (!escaped) {\n                    if (currentStrQuoteChar) {\n                        if (currentStrQuoteChar === char) { // Ending string\n                            currentStrQuoteChar = \"\";\n                        }\n                        // Else just writing a quote inside, ex: \"assembler's\"\n                    }\n                    else { // Beginning string\n                        currentStrQuoteChar = char;\n                    }\n                }\n                break;\n        }\n        writeToCurrentPiece(char);\n        if (char !== \"\\\\\") {\n            escaped = false;\n        }\n        prevChar = char;\n    }\n    if (currentParenLevel > 0)\n        throw new Error(\"Imbalanced parenthesis in expression: \" + str);\n    if (currentStrQuoteChar)\n        throw new Error(\"Unterminated string: \" + currentPiece);\n    endCurrentPiece();\n    return pieces;\n}\nfunction charSplitsExpressions(char) {\n    return char === \",\" || charIsWhitespace(char);\n}\nfunction charIsWhitespace(char) {\n    return char === \" \" || char === \"\\t\";\n}\n\n\n//# sourceURL=webpack://MIPSAssem/./src/expressions.ts?");

/***/ }),

/***/ "./src/functions.ts":
/*!**************************!*\
  !*** ./src/functions.ts ***!
  \**************************/
/*! exports provided: runFunction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"runFunction\", function() { return runFunction; });\n/* harmony import */ var _immediates__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./immediates */ \"./src/immediates.ts\");\n/* harmony import */ var _symbols__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./symbols */ \"./src/symbols.ts\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings */ \"./src/strings.ts\");\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./labels */ \"./src/labels.ts\");\n\n\n\n\n/** Runs any built-in functions, and also resolves symbols. */\nfunction runFunction(value, state) {\n    return _runFunction(value, state);\n}\nvar fnRegex = new RegExp(\"^(\\\\w+)\\\\(([\\\\(\\\\),\\\\w\" + _labels__WEBPACK_IMPORTED_MODULE_3__[\"LABEL_CHARS\"] + \"]*)\\\\)$\", \"i\");\nfunction _runFunction(value, state) {\n    var results = fnRegex.exec(value);\n    if (results === null) { // Not a function\n        // Number?\n        var imm = Object(_immediates__WEBPACK_IMPORTED_MODULE_0__[\"parseImmediate\"])(value);\n        if (imm !== null) {\n            return imm;\n        }\n        // String?\n        var str = Object(_strings__WEBPACK_IMPORTED_MODULE_2__[\"unescapeQuotes\"])(value);\n        if (typeof str === \"string\") {\n            return str;\n        }\n        var symbolValue = Object(_symbols__WEBPACK_IMPORTED_MODULE_1__[\"getSymbolValue\"])(state, value);\n        if (symbolValue !== null) {\n            return symbolValue;\n        }\n        return null;\n    }\n    else {\n        var fn = results[1];\n        if (!fns[fn]) {\n            // Did a symbol label accidentally look like a function?\n            var symbolValue = Object(_symbols__WEBPACK_IMPORTED_MODULE_1__[\"getSymbolValue\"])(state, fn);\n            if (symbolValue !== null) {\n                return symbolValue;\n            }\n            return null; // Might have been something like 0x10(V0)\n        }\n        // Parse args slightly different than the regex suggests,\n        // to support lo(label)(V0)\n        var fnArgs = \"\";\n        var parenLevel = 0;\n        var i = void 0;\n        for (i = fn.length + 1; i < value.length - 1; i++) {\n            var char = value[i];\n            if (char === \"(\") {\n                parenLevel++;\n            }\n            else if (char === \")\") {\n                parenLevel--;\n                if (parenLevel < 0) {\n                    i++;\n                    break;\n                }\n            }\n            fnArgs += char;\n        }\n        var extraStr = void 0;\n        if (i < value.length - 1) {\n            // There was extra content after the end of the function,\n            // like the (VO) of lo(label)(V0)\n            extraStr = value.substring(i, value.length);\n            return fns[fn](state, _runFunction(fnArgs, state)) + extraStr;\n        }\n        // TODO: Doesn't support nested calls, multiple arguments.\n        return fns[fn](state, _runFunction(fnArgs, state));\n    }\n}\n/** Built-in functions */\nvar fns = Object.create(null);\nfns.hi = function (state, value) {\n    if (typeof value === \"string\")\n        throw new Error(\"Assembler function hi cannot be called with string \\\"\" + value + \"\\\", value must be a number.\");\n    var lower = value & 0x0000FFFF;\n    var upper = value >>> 16;\n    if (lower & 0x8000)\n        upper += 1;\n    return upper;\n};\nfns.lo = function (state, value) {\n    if (typeof value === \"string\")\n        throw new Error(\"Assembler function lo cannot be called with string \\\"\" + value + \"\\\", value must be a number.\");\n    return value & 0x0000FFFF;\n};\n/** Current memory address */\nfns.org = function (state, value) {\n    return state.memPos + state.outIndex;\n};\n\n\n//# sourceURL=webpack://MIPSAssem/./src/functions.ts?");

/***/ }),

/***/ "./src/immediates.ts":
/*!***************************!*\
  !*** ./src/immediates.ts ***!
  \***************************/
/*! exports provided: parseImmediate, formatImmediate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parseImmediate\", function() { return parseImmediate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"formatImmediate\", function() { return formatImmediate; });\nfunction parseImmediate(value) {\n    if (typeof value !== \"string\")\n        return null;\n    var negative = value[0] === \"-\";\n    if (negative)\n        value = value.substr(1);\n    var result;\n    if (value[0] === \"b\" || value[0] === \"0\" && value[1] === \"b\")\n        result = parseInt(value.substr(2), 2);\n    else if (value[0] === \"o\" || value[0] === \"0\" && value[1] === \"o\")\n        result = parseInt(value.substr(2), 8);\n    else if (value[0] === \"x\" || value[0] === \"0\" && value[1] === \"x\")\n        result = parseInt(value.substr(2), 16);\n    else\n        result = parseInt(value, 10);\n    if (isNaN(result))\n        return null;\n    if (negative)\n        result = -result;\n    return result;\n}\n/**\n * Formats a numeric value for use in final assembly.\n * @param value Numeric value\n */\nfunction formatImmediate(value) {\n    var isZero = value === 0;\n    var isNegative = value < 0;\n    var result = value.toString(16).toUpperCase();\n    if (isNegative) {\n        result = result.substr(1); // Remove the negative sign.\n    }\n    return (isNegative ? \"-\" : \"\")\n        + (isZero ? \"\" : \"0x\")\n        + result;\n}\n\n\n//# sourceURL=webpack://MIPSAssem/./src/immediates.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! exports provided: assemble */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _assembler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assembler */ \"./src/assembler.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"assemble\", function() { return _assembler__WEBPACK_IMPORTED_MODULE_0__[\"assemble\"]; });\n\n\n\n\n//# sourceURL=webpack://MIPSAssem/./src/index.ts?");

/***/ }),

/***/ "./src/labels.ts":
/*!***********************!*\
  !*** ./src/labels.ts ***!
  \***********************/
/*! exports provided: LABEL_CHARS, LABEL_REGEX_STR, parseGlobalLabel, isLocalLabel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LABEL_CHARS\", function() { return LABEL_CHARS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LABEL_REGEX_STR\", function() { return LABEL_REGEX_STR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parseGlobalLabel\", function() { return parseGlobalLabel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isLocalLabel\", function() { return isLocalLabel; });\n/* harmony import */ var _symbols__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./symbols */ \"./src/symbols.ts\");\n\nvar LABEL_CHARS = \"\\\\?\\\\!\";\nvar LABEL_REGEX_STR = \"(?:@@)?[\\\\w\" + LABEL_CHARS + \"]+\";\nvar labelRegex = new RegExp(\"^(\" + LABEL_REGEX_STR + \")\\\\:\");\n/**\n * Parses a LABEL: expression and adds it to the symbol table.\n * Examples of valid labels:\n *    basicLabel:    excited!Label!:    mystery?Label?:\n *    @@localLabel:  12345:             !?!:\n */\nfunction parseGlobalLabel(state) {\n    var results = state.line.match(labelRegex);\n    if (results === null)\n        return false; // Not a label.\n    var name = results[1];\n    if (isLocalLabel(name)) {\n        if (!state.currentLabel) {\n            throw new Error(\"Local label \" + name + \" (starts with @@) cannot be used before a global label\");\n        }\n        Object(_symbols__WEBPACK_IMPORTED_MODULE_0__[\"addLocalSymbol\"])(state, name, getLabelValueFromState(state));\n    }\n    else {\n        state.currentLabel = name;\n        Object(_symbols__WEBPACK_IMPORTED_MODULE_0__[\"addSymbol\"])(state, name, getLabelValueFromState(state));\n    }\n    return name;\n}\nfunction isLocalLabel(name) {\n    return name.indexOf(\"@@\") === 0;\n}\nfunction getLabelValueFromState(state) {\n    return (state.memPos + state.outIndex) >>> 0;\n}\n\n\n//# sourceURL=webpack://MIPSAssem/./src/labels.ts?");

/***/ }),

/***/ "./src/strings.ts":
/*!************************!*\
  !*** ./src/strings.ts ***!
  \************************/
/*! exports provided: unescapeQuotes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"unescapeQuotes\", function() { return unescapeQuotes; });\n/**\n * Takes a string like\n * \"\\\"has quotes\\\"\"\n * and returns\n * \"has quotes\"\n * @returns Parsed string, or null if could not parse.\n */\nfunction unescapeQuotes(str) {\n    if (str.length < 2)\n        return null;\n    var startQuoteChar = str[0];\n    if (str[str.length - 1] !== startQuoteChar) {\n        return null;\n    }\n    if (startQuoteChar !== \"\\\"\" && startQuoteChar !== \"'\") {\n        return null; // Not a string\n    }\n    var output = \"\";\n    for (var i = 1; i < str.length - 1; i++) {\n        var char = str[i];\n        if (char === \"\\\\\") {\n            var nextChar = str[i + 1];\n            switch (nextChar) {\n                case \"\\\\\":\n                case \"\\\"\":\n                case \"'\":\n                    output += nextChar;\n                    i++;\n                    continue;\n            }\n        }\n        output += char;\n    }\n    return output;\n}\n\n\n//# sourceURL=webpack://MIPSAssem/./src/strings.ts?");

/***/ }),

/***/ "./src/symbols.ts":
/*!************************!*\
  !*** ./src/symbols.ts ***!
  \************************/
/*! exports provided: addSymbol, addLocalSymbol, getSymbolValue, getSymbolByValue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addSymbol\", function() { return addSymbol; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addLocalSymbol\", function() { return addLocalSymbol; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSymbolValue\", function() { return getSymbolValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSymbolByValue\", function() { return getSymbolByValue; });\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labels */ \"./src/labels.ts\");\n\n/**\n * Adds a symbol to the symbol table.\n * @param state Assembler state\n * @param name Symbol name\n * @param value Symbol value\n */\nfunction addSymbol(state, name, value) {\n    state.symbols[name] = value;\n    state.symbolsByValue[value] = name;\n}\n/**\n * Adds a local symbol to the symbol table.\n * @param state Assembler state\n * @param name Local symbol name\n * @param value Local symbol value\n *\n * Assumes !!state.currentLabel\n */\nfunction addLocalSymbol(state, name, value) {\n    var localTable = state.localSymbols[state.currentLabel];\n    if (!localTable) {\n        localTable = state.localSymbols[state.currentLabel] = Object.create(null);\n    }\n    localTable[name] = value;\n}\n/**\n * Retrieves a symbol by name, global or local.\n */\nfunction getSymbolValue(state, name) {\n    if (Object(_labels__WEBPACK_IMPORTED_MODULE_0__[\"isLocalLabel\"])(name)) {\n        if (!state.currentLabel) {\n            throw new Error(\"Local label \" + name + \" cannot be referenced in the current scope\");\n        }\n        var localTable = state.localSymbols[state.currentLabel];\n        if (localTable && Object.prototype.hasOwnProperty.call(localTable, name)) {\n            return localTable[name];\n        }\n        return null;\n    }\n    if (Object.prototype.hasOwnProperty.call(state.symbols, name)) {\n        return state.symbols[name];\n    }\n    return null;\n}\n/**\n * Retrieves a symbol by value from the symbol table.\n * Does not retrieve local labels.\n */\nfunction getSymbolByValue(state, value) {\n    // Don't need hasOwnProperty check here, all values in key->value should be truthy strings.\n    return state.symbolsByValue[value] || null;\n}\n\n\n//# sourceURL=webpack://MIPSAssem/./src/symbols.ts?");

/***/ }),

/***/ "./src/types.ts":
/*!**********************!*\
  !*** ./src/types.ts ***!
  \**********************/
/*! exports provided: AssemblerPhase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AssemblerPhase\", function() { return AssemblerPhase; });\nvar AssemblerPhase;\n(function (AssemblerPhase) {\n    AssemblerPhase[AssemblerPhase[\"firstPass\"] = 0] = \"firstPass\";\n    AssemblerPhase[AssemblerPhase[\"secondPass\"] = 1] = \"secondPass\";\n})(AssemblerPhase || (AssemblerPhase = {}));\n\n\n//# sourceURL=webpack://MIPSAssem/./src/types.ts?");

/***/ })

/******/ });
});